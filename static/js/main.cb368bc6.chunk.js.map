{"version":3,"sources":["objects/portfolios.js","lib/src/ArcPath.js","lib/src/Arcs.js","lib/src/DonutInnerText.js","lib/src/LegendItem.js","lib/src/Legend.js","lib/src/DonutChart.js","lib/src/DonutInnerTextMobile.js","lib/src/DonutChartMobile.js","components/risk-tolerance/risk-page-1.jsx","objects/categories.js","functions/generate-transactions.js","components/linear-selector/linear-selector.jsx","components/risk-tolerance/risk-page-2.jsx","components/risk-tolerance/risk-tolerance.jsx","App.js","serviceWorker.js","index.js"],"names":["Portfolios","1","2","3","4","futures","5","6","options","7","8","9","10","coordinates","half","radius","startAngle","endAngle","startAngleDegrees","Math","PI","x1","cos","y1","sin","endAngleDegrees","x2","y2","arc","width","largeArcFlag","x","y","z","ArcPath","this","props","angle","total","fill","stroke","opacity","item","className","innerRadius","outerRadius","onClick","onMouseEnter","value","d","activeAngle","largeArcFlagOuter","largeArcFlagInner","outerCoords","innerCoords","outerArc","innerArc","path","Number","isNaN","Component","defaultProps","label","isEmpty","Arcs","data","selectedOffset","toggledOffset","emptyOffset","colors","emptyColor","strokeColor","colorFunction","selected","toggleSelect","arcPathClassName","map","index","classes","empty","toggled","arcPath","key","classnames","length","DonutInnerText","formatValues","labelClassName","valueClassName","textAnchor","LegendItem","totalWidth","legendRectClassName","legendLabelClassName","sqUnit","position","transform","height","dy","Legend","legendItemClassName","DonutChart","state","newProps","JSON","stringify","setState","toggle","clickToggle","legend","arcsClassName","innerTextClassName","legendClassName","checkData","reduce","sum","currItem","graphWidth","legendWidth","viewBox","handleMouseEnter","bind","handleClick","toFixed","simpleNumberLocalizer","RiskPage1","numberChange","pageNumber","intervalId","clearTimeout","setTimeout","riskTolerance","setRiskTolerance","portfolio","Object","keys","el","style","marginRight","nextPage","Array","from","document","getElementsByClassName","forEach","innerHTML","endsWith","addPercentSigns","maxWidth","marginBottom","min","max","onChange","renderRecommendation","React","categories","generateTransactionObject","idealStateInPercentage","roundingPercentage","roundedState","roundedIdealState","cat","parseInt","round","transactionsInPercentages","idealState","desiredChange","exactCanceller","exactCancellers","result","desiredChangeByCat","desiredChangeByAmt","prototype","without","idx","indexOf","slice","concat","i","siblingCats","pop","push","j","cat2","desiredChange2","desiredChange3","cat3","find","c","includes","product","cats","oddCatOut","oddChangeOut","sameSideCats","filter","ssc","priorSibs","cIdx","desiredChangeWithOppositeSign","undefined","change","antiCat","transferAmt","abs","newDesiredChangeForAntiCat","newSiblingCats","exactCancellersForAntiCat","generateTransactionObjectFromRoundedData","transactionsBySource","transactionsInDollars","t","newTransaction","sourceCat","transaction","remainder","LinearSelector","selectedNotchIdx","default","notchSeparation","setSelectedIdx","selectionFunction","prevProps","dummyIdx","numBuckets","leftText","rightText","middleBuckets","left","id","offset","stopColor","stopOpacity","points","strokeWidth","renderNotch","_","RiskPage2","obj","buttonClick","window","getState","e","console","log","split","preventDefault","target","parseFloat","transactionChoices","roundingPercentageUpperBound","numSteps","stepSize","results","minNumberOfTransactions","sort","random","newTransactionObject","generateTransactionChoices","choiceIdx","choice","display","val","textAlign","onFocus","focusHandler","onBlur","blurHandler","defaultValue","onKeyDown","keyDownHandler","onPaste","RiskTolerance","page","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+TAoBeA,EApBE,CACbC,EAAG,CAAC,eAAgB,GAAI,mBAAoB,GAAI,sBAAuB,IACvEC,EAAG,CAAC,eAAgB,GAAI,mBAAoB,GACxC,sBAAuB,GAAI,cAAe,IAC9CC,EAAG,CAAC,mBAAoB,GAAI,eAAgB,GAC5C,sBAAuB,GAAI,cAAe,IAC1CC,EAAG,CAAC,mBAAoB,GAAI,sBAAuB,GACnD,cAAe,GAAIC,QAAS,IAC5BC,EAAG,CAAC,sBAAuB,GAAI,mBAAoB,GACnD,cAAe,GAAID,QAAS,IAC5BE,EAAG,CAAE,sBAAuB,GAAI,cAAe,GAC/CF,QAAS,GAAIG,QAAS,IAEtBC,EAAG,CAAE,cAAe,GAAI,sBAAuB,GAAIJ,QAAS,GAAIG,QAAS,IACzEE,EAAG,CAACL,QAAS,GAAI,cAAe,GAAIG,QAAS,GAAI,sBAAuB,IACxEG,EAAG,CAACH,QAAS,GAAIH,QAAS,GAAI,cAAe,GAAI,sBAAuB,IACxEO,GAAI,CAACJ,QAAS,GAAIH,QAAS,GAAI,cAAe,K,iCCElD,SAASQ,EAAYC,EAAMC,EAAQC,EAAYC,GAC3C,IAAMC,EAAqBC,KAAKC,GAAKJ,EAAc,IAC7CK,EAAKP,EAASA,EAAOC,EAAUI,KAAKG,IAAIJ,GACxCK,EAAKT,EAASA,EAAOC,EAAUI,KAAKK,IAAIN,GACxCO,EAAmBN,KAAKC,GAAKH,EAAY,IAI/C,MAAO,CACHI,KACAE,KACAG,GANOZ,EAASA,EAAOC,EAAUI,KAAKG,IAAIG,GAO1CE,GANOb,EAASA,EAAOC,EAAUI,KAAKK,IAAIC,IAkBlD,SAASG,EAAIC,EAAOd,EAAQe,EAAcC,EAAGC,GACzC,IAAMC,EAAKJ,EAAQ,EAAKd,EAExB,MAAM,IAAN,OAAWkB,EAAX,aAAiBA,EAAjB,cAAwBH,EAAxB,YAAwCC,EAAxC,aAA8CC,G,IAwC7BE,E,iLAEP,IAAD,EAIDC,KAAKC,MAFLP,EAFC,EAEDA,MAAOQ,EAFN,EAEMA,MAAOC,EAFb,EAEaA,MAAOC,EAFpB,EAEoBA,KAAMC,EAF1B,EAE0BA,OAAQC,EAFlC,EAEkCA,QAASC,EAF3C,EAE2CA,KAAMC,EAFjD,EAEiDA,UAClDC,EAHC,EAGDA,YAAaC,EAHZ,EAGYA,YAAaC,EAHzB,EAGyBA,QAASC,EAHlC,EAGkCA,aAE/BC,EAAUN,EAAVM,MAGFC,EArCd,SAAcC,EAAalC,EAAYa,EAAOe,EAAaC,GACvD,IAAM5B,EAAWD,EAAakC,EAExBC,EAAoBD,EAAc,IAAM,MAAQ,MAChDE,EAAoBF,EAAc,IAAM,MAAQ,MAChDpC,EAAOe,EAAQ,EACfwB,EAAcxC,EAAYC,EAAM+B,EAAa7B,EAAYC,GACzDqC,EAAczC,EAAYC,EAAM8B,EAAa5B,EAAYC,GAEzDsC,EAAW3B,EACbC,EAAOgB,EAAaM,EACpBE,EAAY3B,GAAI2B,EAAY1B,IAE1B6B,EAAW5B,EACbC,EAAOe,EAAaQ,EACpBE,EAAYjC,GAAIiC,EAAY/B,IAGhC,MAAM,IAAN,OAAW8B,EAAYhC,GAAvB,YAA6BgC,EAAY9B,GAAzC,iBACEgC,EADF,kBAEGD,EAAY5B,GAFf,YAEqB4B,EAAY3B,GAFjC,iBAGE6B,EAHF,MAmBcC,CAFWC,OAAOC,MAAMX,EAAQV,IACrCA,EAAQU,IAAW,EAAM,OAAUA,EAAQV,EAAS,IAC7BD,EAAOR,EAAOe,EAAaC,GACvD,OAAO,0BACHC,QAAU,kBAAMA,EAAQJ,IACxBK,aAAe,kBAAMA,EAAaL,IAClCC,UAAYA,EACZM,EAAIA,EACJT,OAASA,EACTD,KAAOA,EACPE,QAAUA,Q,GAlBemB,aA2CrC1B,EAAQ2B,aAAe,CACnBnB,KAAM,CACFoB,MAAO,GACPd,MAAO,IACPe,SAAS,GAEbzB,MAAO,IACPD,MAAO,EACPR,MAAO,IACPe,YAAa,GACbC,YAAa,GACbE,aAAc,SAAAL,GAAI,OAAIA,GACtBI,QAAS,SAAAJ,GAAI,OAAIA,GACjBH,KAAM,UACNC,OAAQ,UACRC,QAAS,EACTE,UAAW,wB,IC/HMqB,E,iLAEP,IAAD,SAMD7B,KAAKC,MAJLpB,EAFC,EAEDA,WAAY2B,EAFX,EAEWA,UAAWsB,EAFtB,EAEsBA,KAAMC,EAF5B,EAE4BA,eAAgBC,EAF5C,EAE4CA,cAC7CC,EAHC,EAGDA,YAAaC,EAHZ,EAGYA,OAAQC,EAHpB,EAGoBA,WAAYC,EAHhC,EAGgCA,YAAaC,EAH7C,EAG6CA,cAC9CzB,EAJC,EAIDA,aAAcD,EAJb,EAIaA,QAASR,EAJtB,EAIsBA,MAAOT,EAJ7B,EAI6BA,MAC9B4C,EALC,EAKDA,SAAUC,EALT,EAKSA,aAERC,EAAgB,UAAMhC,EAAN,SAClBN,EAAQrB,EAEZ,OAAO,uBACH2B,UAAYA,GACVsB,EAAKW,IAAI,SAAClC,EAAMmC,GACd,IAAMC,EAAU,GACR9B,EAA8BN,EAA9BM,MAAOe,EAAuBrB,EAAvBqB,QAASpB,EAAcD,EAAdC,UAFA,EAIW,EAAKP,MAAlCQ,EAJkB,EAIlBA,YAAaC,EAJK,EAILA,YACfL,EAAS+B,EACT9B,EAAU,EAEVsB,GACAe,EAAQC,OAAQ,EAChBnC,GAAewB,EACfvB,GAAeuB,EACf5B,EAAS8B,GACFG,EAASX,QAAUpB,EAAKoB,QAC3BY,GACAI,EAAQE,SAAU,EAClBpC,GAAeuB,EACftB,GAAesB,EACf1B,EAAU,IAEVqC,EAAQL,UAAW,EACnB5B,GAAeqB,EACfzB,EAAU,KAIdE,IACAmC,EAAQnC,IAAa,GAEzBmC,EAAQH,IAAoB,EAE5B,IAAMpC,EAAOwB,EAAUO,EAAaE,EAAcH,EAAQQ,GAEpDI,EAAU,kBAAC,EAAD,CACZpD,MAAQA,EACRa,KAAOA,EACPwC,IAAG,iBAAaL,GAChBjC,YAAcA,EAAcC,YAAcA,EAC1CF,UAAYwC,IAAWL,GACvBrC,QAAUA,EACVF,KAAOA,EACPC,OAASA,EACTH,MAAQA,EACRC,MAAQA,EACRS,aAAeA,EACfD,QAAUA,IAKd,OAFAT,GAAUW,EAAQV,EAAS,IAEpB2C,S,GAhEWrB,aAqGlCI,EAAKH,aAAe,CAChBI,KAAM,CAAC,CACHH,MAAO,GACPd,MAAO,IACPe,SAAS,IAEbU,SAAU,CACNzB,MAAO,IACPc,MAAO,GACPC,SAAS,GAEbW,cAAc,EACdpC,MAAO,IACPK,UAAW,kBACXd,MAAO,IACPwC,OAAQ,CAAC,UAAW,UAAW,UAAW,UACtC,UAAW,UAAW,UAAW,UACjC,UAAW,UAAW,UAAW,UACjC,UAAW,UAAW,UAAW,UACjC,UAAW,WACfC,WAAY,UACZC,YAAa,UACbvD,WAAY,EACZwD,cAAe,SAACH,EAAQQ,GAAT,OAAmBR,EAAQQ,EAAQR,EAAOe,SACzDxC,YAAa,GACbC,YAAa,GACbqB,eAAgB,IAChBE,YAAa,IACbD,cAAe,IACfpB,aAAc,SAAAL,GAAI,OAAIA,GACtBI,QAAS,SAAAJ,GAAI,OAAIA,I,ICvIA2C,E,iLAEP,IAAD,EAGDlD,KAAKC,MADLM,EAFC,EAEDA,KAAMC,EAFL,EAEKA,UAAWd,EAFhB,EAEgBA,MAAOyD,EAFvB,EAEuBA,aAAchD,EAFrC,EAEqCA,MAElCwB,EAAUpB,EAAVoB,MACAd,EAAUN,EAAVM,MACFlC,EAAOe,EAAQ,EACf0D,EAAc,UAAM5C,EAAN,UACd6C,EAAc,UAAM7C,EAAN,UAEpB,OAAO,uBAAGA,UAAYA,GAClB,0BACIA,UAAY4C,EACZxD,EAAIjB,EACJkB,EAAE,MACFyD,WAAW,UACT3B,GAEN,0BACInB,UAAY6C,EACZzD,EAAIjB,EACJkB,EAAE,MACFyD,WAAW,UACTH,EAAatC,EAAOV,S,GAzBMsB,aA4C5CyB,EAAexB,aAAe,CAC1BnB,KAAM,CACFoB,MAAO,GACPd,MAAO,IACPe,SAAS,GAEbzB,MAAO,IACPK,UAAW,uBACXd,MAAO,IACPyD,aAAc,SAAAtC,GAAK,OAAIA,I,ICrDN0C,E,iLAEP,IAAD,EAIDvD,KAAKC,MAFLO,EAFC,EAEDA,UAAWD,EAFV,EAEUA,KAAMmC,EAFhB,EAEgBA,MAAO/B,EAFvB,EAEuBA,QAASC,EAFhC,EAEgCA,aAAcR,EAF9C,EAE8CA,KAAME,EAFpD,EAEoDA,QACrDZ,EAHC,EAGDA,MAAO8D,EAHN,EAGMA,WAAYnD,EAHlB,EAGkBA,OAEfsB,EAAiBpB,EAAjBoB,MAAOd,EAAUN,EAAVM,MAET4C,EAAmB,UAAMjD,EAAN,SACnBkD,EAAoB,UAAMlD,EAAN,UACpBmD,EAASjE,EAAQ,GAGjBkE,EAAQ,oBAAgBJ,EAAa9D,EAA7B,cAFE,IAGpBgD,EAAmBiB,EADD,KAEd,OAAO,uBACHE,UAAYD,EACZpD,UAAaA,EACbG,QAAU,WAAQA,EAAQJ,IAC1BK,aAAe,WAAQA,EAAaL,KACpC,0BACIC,UAAYiD,EACZ/D,MAAQiE,EACRG,OAASH,EACTvD,KAAOA,EACPE,QAAUA,EACVD,OAASA,IAEb,0BACIG,UAAYkD,EACZ9D,EAAI+D,EAAUA,EAAS,EACvB9D,EAAK8D,EAAS,EACdI,GAAG,SAJP,UAKSpC,EALT,cAKoBd,S,GAlCQY,aA0DxC8B,EAAW7B,aAAe,CACtBnB,KAAM,CACFoB,MAAO,GACPd,MAAO,IACPe,SAAS,GAEbc,MAAO,EACPpC,QAAS,EACTF,KAAM,UACNC,OAAQ,UACRG,UAAW,yBACXd,MAAO,IACP8D,WAAY,IACZ5C,aAAc,SAAAL,GAAI,OAAIA,GACtBI,QAAS,SAAAJ,GAAI,OAAIA,I,ICpEAyD,E,iLAEP,IAAD,EAIDhE,KAAKC,MAFLO,EAFC,EAEDA,UAAWsB,EAFV,EAEUA,KAAMM,EAFhB,EAEgBA,YAAaD,EAF7B,EAE6BA,WAAYE,EAFzC,EAEyCA,cAAeH,EAFxD,EAEwDA,OACzDxC,EAHC,EAGDA,MAAO8D,EAHN,EAGMA,WAAY7C,EAHlB,EAGkBA,QAASC,EAH3B,EAG2BA,aAAc2B,EAHzC,EAGyCA,aAAcD,EAHvD,EAGuDA,SAGtD2B,EAAmB,UAAMzD,EAAN,SACzB,OAAO,uBACHA,UAAYA,GACVsB,EAAKW,IAAI,SAAClC,EAAMmC,GACd,IAAMC,EAAU,GACRf,EAAuBrB,EAAvBqB,QAASpB,EAAcD,EAAdC,UACbH,EAAS+B,EACT9B,EAAU,EAEVsB,GACAe,EAAQC,OAAQ,EAChBvC,EAAS8B,GACFG,EAASX,QAAUpB,EAAKoB,QAC3BY,GACAI,EAAQE,SAAU,EAClBvC,EAAU,IAEVqC,EAAQL,UAAW,EACnBhC,EAAU,KAIdE,IACAmC,EAAQnC,IAAa,GAGzBmC,EAAQsB,IAAuB,EAE/B,IAAM7D,EAAOwB,EAAUO,EAAaE,EAAcH,EAAQQ,GAE1D,OAAO,kBAAC,EAAD,CACHK,IAAG,oBAAgBL,GACnBA,MAAQA,EACRnC,KAAOA,EACPC,UAAYwC,IAAWL,GACvBjD,MAAQA,EACR8D,WAAaA,EACblD,QAAUA,EACVF,KAAQA,EACRC,OAASA,EACTM,QAAUA,EACVC,aAAeA,W,GAjDCa,aAiFpCuC,EAAOtC,aAAe,CAClBI,KAAM,CAAC,CACHH,MAAO,GACPd,MAAO,IACPe,SAAS,IAEbU,SAAU,CACNzB,MAAO,IACPc,MAAO,GACPC,SAAS,GAEbW,cAAc,EACd/B,UAAW,oBACXd,MAAO,IACP8D,WAAY,IACZtB,OAAQ,CAAC,UAAW,UAAW,UAC3B,UAAW,UAAW,UACtB,UAAW,UAAW,UACtB,UAAW,UAAW,UACtB,UAAW,UAAW,UACtB,UAAW,UAAW,WAC1BC,WAAY,UACZC,YAAa,UACbC,cAAe,SAACH,EAAQQ,GAAT,OAAmBR,EAAQQ,EAAQR,EAAOe,SACzDrC,aAAc,SAAAL,GAAI,OAAIA,GACtBI,QAAS,SAAAJ,GAAI,OAAIA,I,IC/FA2D,E,YAMjB,WAAYjE,GAAQ,IAAD,sBACf,4CAAMA,IADS,IAGP6B,EAAS7B,EAAT6B,KAHO,OAKf,EAAKqC,MAAQ,CACT7B,SAAUR,EAAK,GACfS,cAAc,GAPH,E,uFAWO6B,GAAW,IACzBtC,EAASsC,EAATtC,KAGJA,GAASuC,KAAKC,UAAUxC,KACZuC,KAAKC,UAAUtE,KAAKC,MAAM6B,OACtC9B,KAAKuE,SAAS,CACVjC,SAAUR,EAAK,GACfS,cAAc,M,kCAedhC,GACR,GAAIP,KAAKmE,MAAM7B,SAASX,QAAUpB,EAAKoB,MAAO,CAC1C,IAAM6C,IAASxE,KAAKC,MAAMwE,cAAezE,KAAKmE,MAAM5B,aACpDvC,KAAKuE,SAAS,CACVhC,aAAciC,EACdlC,SAAU/B,IAEdP,KAAKC,MAAMU,QAAQJ,EAAMiE,M,uCAShBjE,GACRP,KAAKmE,MAAM5B,eACZvC,KAAKuE,SAAS,CACVjC,SAAU/B,IAEdP,KAAKC,MAAMW,aAAaL,M,+BAKtB,IAAD,EAKDP,KAAKC,MAHLpB,EAFC,EAEDA,WAAYa,EAFX,EAEWA,MAAOoE,EAFlB,EAEkBA,OAAQX,EAF1B,EAE0BA,aAAc3C,EAFxC,EAEwCA,UAAWsB,EAFnD,EAEmDA,KAAM4C,EAFzD,EAEyDA,OAC1DvC,EAHC,EAGDA,WAAYC,EAHX,EAGWA,YAAaF,EAHxB,EAGwBA,OAAQG,EAHhC,EAGgCA,cAAe5B,EAH/C,EAG+CA,YAChDC,EAJC,EAIDA,YAAauB,EAJZ,EAIYA,YAAaF,EAJzB,EAIyBA,eAAgBC,EAJzC,EAIyCA,cAGxC2C,EAAa,UAAMnE,EAAN,SACboE,EAAkB,UAAMpE,EAAN,cAClBqE,EAAe,UAAMrE,EAAN,WAEfsE,EAAYhD,EAAKmB,OAASnB,EAAO,CAAC,CACpCH,MAAO,GACPd,MAAO,IACPe,SAAS,IAGPzB,EAAuB2E,EAzFpBC,OAAO,SAACC,EAAKC,GAAN,OAAmBD,EAAMC,EAASpE,OAAO,GA2FnDqE,EAAaR,EAAUhF,GADX,EAAI,GAC4BA,EAC5CyF,EAAczF,EAAQwF,EAE5B,OAAO,yBAAK1E,UAAYA,EAGpB4E,QAAO,mBAActB,IAErB,kBAAC,EAAD,CACItD,UAAYmE,EACZzC,OAASA,EACTJ,KAAOgD,EACPpF,MAAQwF,EACR/C,WAAaA,EACbC,YAAcA,EACdC,cAAgBA,EAChBzB,aAAeZ,KAAKqF,iBAAiBC,KAAKtF,MAC1CW,QAAUX,KAAKuF,YAAYD,KAAKtF,MAChCsC,SAAWtC,KAAKmE,MAAM7B,SACtBzD,WAAeA,EACf0D,aAAevC,KAAKmE,MAAM5B,aAC1B9B,YAAcA,EACdC,YAAcA,EACdqB,eAAiBA,EACjBC,cAAgBA,EAChBC,YAAcA,EACd9B,MAAQA,IACZ,kBAAC,EAAD,CACII,KAAOP,KAAKmE,MAAM7B,SAClB5C,MAAQwF,EACR/B,aAAeA,EACfhD,MAAQA,EACRK,UAAaoE,IACfF,EACE,kBAAC,EAAD,CACI5C,KAAOgD,EACPtB,WAAa9D,EACbA,MAAQyF,EACRjD,OAASA,EACTC,WAAaA,EACbC,YAAcA,EACdC,cAAgBA,EAChBzB,aAAeZ,KAAKqF,iBAAiBC,KAAKtF,MAC1CW,QAAUX,KAAKuF,YAAYD,KAAKtF,MAChCsC,SAAWtC,KAAKmE,MAAM7B,SACtBC,aAAevC,KAAKmE,MAAM5B,aAC1B/B,UAAYqE,IACd,U,GApIsBpD,aAoKxCyC,EAAWxC,aAAe,CACtBI,KAAM,CAAC,CACHH,MAAO,GACPd,MAAO,IACPe,SAAS,IAEbpB,UAAW,aACXsD,OAAQ,IACRpE,MAAO,IACPwC,OAAQ,CAAC,UAAW,UAAW,UAAW,UACtC,UAAW,UAAW,UAAW,UACjC,UAAW,UAAW,UAAW,UACjC,UAAW,UAAW,UAAW,UACjC,UAAW,WACfC,WAAY,UACZC,YAAa,UACbvD,WAAY,EACZwD,cAAe,SAACH,EAAQQ,GAAT,OAAmBR,EAAQQ,EAAQR,EAAOe,SACzDxC,YAAa,GACbC,YAAa,GACbqB,eAAgB,IAChBE,YAAa,IACbD,cAAe,IACfmB,aAAc,SAACtC,EAAOV,GAAR,OACVoB,OAAOC,MAAMX,EAAQV,GAAS,KAA9B,WACWU,EAAQV,EAAS,KAAKqF,QAAQ,GADzC,MAGJ5E,aAAc,SAAAL,GAAI,OAAIA,GACtBI,QAAS,SAACJ,EAAMsC,GAAP,OAAoBA,EAAUtC,EAAO,MAC9CmE,QAAQ,EACRD,aAAa,G,ICjNIvB,E,iLAEP,IAAD,EAGDlD,KAAKC,MADLM,EAFC,EAEDA,KAAMC,EAFL,EAEKA,UAAWd,EAFhB,EAEgBA,MAAOyD,EAFvB,EAEuBA,aAAchD,EAFrC,EAEqCA,MAElCwB,EAAUpB,EAAVoB,MACAd,EAAUN,EAAVM,MACFlC,EAAOe,EAAQ,EACf0D,EAAc,UAAM5C,EAAN,UACd6C,EAAc,UAAM7C,EAAN,UAEpB,OAAO,uBAAGA,UAAYA,GAClB,0BACIA,UAAY4C,EACZxD,EAAIjB,EACJkB,EAAE,MACFyD,WAAW,UACT3B,GAEN,0BACInB,UAAY6C,EACZzD,EAAIjB,EACJkB,EAAE,MACFyD,WAAW,UACTH,EAAatC,EAAOV,S,GAzBMsB,aA4C5CyB,EAAexB,aAAe,CAC1BnB,KAAM,CACFoB,MAAO,GACPd,MAAO,IACPe,SAAS,GAEbzB,MAAO,IACPK,UAAW,uBACXd,MAAO,IACPyD,aAAc,SAAAtC,GAAK,OAAIA,I,ICtCNqD,E,YAMjB,WAAYjE,GAAQ,IAAD,sBACf,4CAAMA,IADS,IAGP6B,EAAS7B,EAAT6B,KAHO,OAKf,EAAKqC,MAAQ,CACT7B,SAAUR,EAAK,GACfS,cAAc,GAPH,E,uFAWO6B,GAAW,IACzBtC,EAASsC,EAATtC,KAGJA,GAASuC,KAAKC,UAAUxC,KACZuC,KAAKC,UAAUtE,KAAKC,MAAM6B,OACtC9B,KAAKuE,SAAS,CACVjC,SAAUR,EAAK,GACfS,cAAc,M,kCAedhC,GACR,GAAIP,KAAKmE,MAAM7B,SAASX,QAAUpB,EAAKoB,MAAO,CAC1C,IAAM6C,IAASxE,KAAKC,MAAMwE,cAAezE,KAAKmE,MAAM5B,aACpDvC,KAAKuE,SAAS,CACVhC,aAAciC,EACdlC,SAAU/B,IAEdP,KAAKC,MAAMU,QAAQJ,EAAMiE,M,uCAShBjE,GACRP,KAAKmE,MAAM5B,eACZvC,KAAKuE,SAAS,CACVjC,SAAU/B,IAEdP,KAAKC,MAAMW,aAAaL,M,+BAKtB,IAAD,EAKDP,KAAKC,MAHLpB,EAFC,EAEDA,WAAYa,EAFX,EAEWA,MAAeyD,GAF1B,EAEkBW,OAFlB,EAE0BX,cAAc3C,EAFxC,EAEwCA,UAAWsB,EAFnD,EAEmDA,KAAM4C,EAFzD,EAEyDA,OAC1DvC,EAHC,EAGDA,WAAYC,EAHX,EAGWA,YAAaF,EAHxB,EAGwBA,OAAQG,EAHhC,EAGgCA,cAAe5B,EAH/C,EAG+CA,YAChDC,EAJC,EAIDA,YAAauB,EAJZ,EAIYA,YAAaF,EAJzB,EAIyBA,eAAgBC,EAJzC,EAIyCA,cAGxC2C,EAAa,UAAMnE,EAAN,SACboE,EAAkB,UAAMpE,EAAN,cAClBqE,EAAe,UAAMrE,EAAN,WAEfsE,EAAYhD,EAAKmB,OAASnB,EAAO,CAAC,CACpCH,MAAO,GACPd,MAAO,IACPe,SAAS,IAGPzB,EAAuB2E,EAzFpBC,OAAO,SAACC,EAAKC,GAAN,OAAmBD,EAAMC,EAASpE,OAAO,GA2FnDqE,EAAaR,EAAUhF,GADX,EAAI,GAC4BA,EAC5CyF,EAAczF,EAAQwF,EAE5B,OAAO,yBAAK1E,UAAU,mBACpBkE,EAEF,yBACAhF,MAAK,UAAK,IAAL,MACLoE,OAAM,UAAM,IAAN,MACNsB,QAAO,iBAEH,kBAAC,EAAD,CACItD,KAAOgD,EACPtB,WAAa9D,EACbA,MAAQyF,EACRjD,OAASA,EACTC,WAAaA,EACbC,YAAcA,EACdC,cAAgBA,EAChBzB,aAAeZ,KAAKqF,iBAAiBC,KAAKtF,MAC1CW,QAAUX,KAAKuF,YAAYD,KAAKtF,MAChCsC,SAAWtC,KAAKmE,MAAM7B,SACtBC,aAAevC,KAAKmE,MAAM5B,aAC1B/B,UAAYqE,KAGd,KACF,yBAAKrE,UAAU,oBACfd,MAAO,QAEP0F,QAAO,eACP,kBAAC,EAAD,CACI5E,UAAYmE,EACZzC,OAASA,EACTJ,KAAOgD,EACPpF,MAAQwF,EACR/C,WAAaA,EACbC,YAAcA,EACdC,cAAgBA,EAChBzB,aAAeZ,KAAKqF,iBAAiBC,KAAKtF,MAC1CW,QAAUX,KAAKuF,YAAYD,KAAKtF,MAChCsC,SAAWtC,KAAKmE,MAAM7B,SACtBzD,WAAeA,EACf0D,aAAevC,KAAKmE,MAAM5B,aAC1B9B,YAAcA,EACdC,YAAcA,EACdqB,eAAiBA,EACjBC,cAAgBA,EAChBC,YAAcA,EACd9B,MAAQA,IACZ,kBAAC,EAAD,CACII,KAAOP,KAAKmE,MAAM7B,SAClB5C,MAAQwF,EACR/B,aAAeA,EACfhD,MAAQA,EACRK,UAAaoE,U,GA5IWnD,aA8KxCyC,EAAWxC,aAAe,CACtBI,KAAM,CAAC,CACHH,MAAO,GACPd,MAAO,IACPe,SAAS,IAEbpB,UAAW,aACXsD,OAAQ,IACRpE,MAAO,IACPwC,OAAQ,CAAC,UAAW,UAAW,UAAW,UACtC,UAAW,UAAW,UAAW,UACjC,UAAW,UAAW,UAAW,UACjC,UAAW,UAAW,UAAW,UACjC,UAAW,WACfC,WAAY,UACZC,YAAa,UACbvD,WAAY,EACZwD,cAAe,SAACH,EAAQQ,GAAT,OAAmBR,EAAQQ,EAAQR,EAAOe,SACzDxC,YAAa,GACbC,YAAa,GACbqB,eAAgB,IAChBE,YAAa,IACbD,cAAe,IACfmB,aAAc,SAACtC,EAAOV,GAAR,OACVoB,OAAOC,MAAMX,EAAQV,GAAS,KAA9B,WACWU,EAAQV,EAAS,KAAKqF,QAAQ,GADzC,MAGJ5E,aAAc,SAAAL,GAAI,OAAIA,GACtBI,QAAS,SAACJ,EAAMsC,GAAP,OAAoBA,EAAUtC,EAAO,MAC9CmE,QAAQ,EACRD,aAAa,GChOjBgB,M,IAqFeC,E,YAlFX,WAAYzF,GAAO,IAAD,8BACd,4CAAMA,KACD0F,aAAe,EAAKA,aAAaL,KAAlB,gBACpB,EAAKnB,MAAQ,CAACyB,WAAY,GAHZ,E,0EAML/E,GAAO,IAAD,OACZb,KAAK6F,YAAYC,aAAa9F,KAAK6F,YACtC7F,KAAK6F,WAAaE,WACd,kBAAM,EAAKxB,SAAS,CAACyB,cAAenF,KAAS,KACjDb,KAAKC,MAAMgG,iBAAiBpF,K,6CAG5B,IAAMmF,EAAgBhG,KAAKmE,MAAM6B,cAC3BE,EAAYrI,EAAWmI,GAC7B,IAAIE,EAAU,OAAO,KACrB,IAAMpE,EAAOqE,OAAOC,KAAKF,GAAWzD,IAChC,SAAAM,GAAG,MAAK,CAACpB,MAAOoB,EAAKlC,MAAOqF,EAAUnD,MAE1C,OACA,yBAAKvC,UAAU,uBACX,wEAA8CwF,EAA9C,oBAEE,yBAAKxF,UAAU,yCAEb,kBAAC,EAAD,CAAYA,UAAU,cAClBsB,KAAMA,EAAMqB,aAAc,SAAAkD,GAAE,OAAIA,EAAG,QAIvC,kBAAC,EAAD,CAAkB7F,UAAU,gCAExBsB,KAAMA,EAAMqB,aAAc,SAAAkD,GAAE,OAAIA,EAAG,OAGnC,6BACA,0BACAC,MAAO,CAACC,YAAa,SADrB,0FAGA,4BACI5F,QACIX,KAAKC,MAAMuG,UAFnB,Y,wCAWZC,MAAMC,KAAKC,SAASC,uBAAuB,kCAAkCC,QACzE,SAAAR,GACCA,EAAGS,UAAUC,SAAS,OAAOV,EAAGS,WAAa,S,sCAGlDH,SAASC,uBAAuB,eAAe,GAAGxB,QAAQ,gB,+BAI1D,OADAW,WAAW/F,KAAKgH,gBAAiB,GAC1B,yBAAKxG,UAAY,QACpB,yBAAKA,UAAU,qBAAqB8F,MAAO,CAACW,SAAU,UACtD,yBAAKX,MAAO,CAACY,aAAc,SAA3B,qLADA,wDASA,kBAAC,IAAD,CAAcC,IAAO,EAAGC,IAAM,GAAI5G,UAAU,gBAC5C6G,SAAYrH,KAAK2F,eAEjB,6BACK3F,KAAKsH,8B,GA1EEC,IAAM9F,W,QCPf+F,EAHI,CAAC,eAAgB,mBACpC,sBAAuB,cAAe,UAAW,WCoKpCC,EAA4B,SAAStD,EAAOuD,EAAwBF,EAAYG,GAC7F,IAAIC,EAAe,GACfC,EAAoB,GACpB1H,EAAQ,EACZqH,EAAWX,QAAQ,SAAAiB,GAAQ3H,GAASgE,EAAM2D,IAAQ,IAClD3H,EAAQ4H,SAAS5H,GACjBqH,EAAWX,QAAQ,SAAAiB,GACdF,EAAaE,GAAM9I,KAAKgJ,MAAmB,IAAb7D,EAAM2D,IAAY3H,EAAMwH,IACvDE,EAAkBC,GAAO9I,KAAKgJ,MAAMN,EAAuBI,GAAMH,KAEjE,IAAIM,EA/KgD,SAAS9D,EAAO+D,EAAYV,GAChF,IAGIW,EACAC,EACAC,EALAC,EAAS,GACTC,EAAqB,GACrBC,EAAqB,GAIzB/B,MAAMgC,UAAUC,QAAU,SAASrC,GAC/B,IAAIsC,EAAM3I,KAAK4I,QAAQvC,GACvB,OAAOrG,KAAK6I,MAAM,EAAGF,GAAKG,OAAO9I,KAAK6I,MAAMF,EAAI,KAEhD,IAAI,IAAII,EAAEvB,EAAWvE,OAAS,EAAG8F,GAAG,EAAGA,IAAI,CACvC,IAAIjB,EAAMN,EAAWuB,GAGrB,GAFAR,EAAmBT,IAAMI,EAAWJ,IAAQ,IAAI3D,EAAM2D,IAAQ,GAExC,KADtBK,EAAgBI,EAAmBT,IACX,CACpB,IAAIkB,EAAcR,EAAmBL,GACrCK,EAAmBL,GAAiBa,EAAcA,EAAYF,OAAO,CAAChB,IAAQ,CAACA,IAGvF,IAAI,IAAIiB,EAAE,EAAGA,EAAEvB,EAAWvE,OAAQ8F,IAAI,CAClC,IAAIjB,EAAMN,EAAWuB,IACpBZ,EAAgBI,EAAmBT,OAEpCO,EAAkBG,GAAoBL,KACfE,EAAgBpF,SACnCuF,EAAmBL,GAAeK,EAAmBL,GAAeO,QAAQZ,GAC5EM,EAAiBC,EAAgBY,MACjCX,EAAOY,KACPf,EAAc,EAAI,CAACL,EAAKM,GAAiBD,GAAiB,CAACC,EAAgBN,EAAKK,IAEhFI,EAAmBT,GAAO,EAC1BS,EAAmBH,GAAkB,IAGzC,IAnCmF,eAmC3EW,GACJ,IAAIjB,EAAMN,EAAWuB,GACpBZ,EAAgBI,EAAmBT,GArC2C,eAsCtEqB,GACL,IAAIC,EAAO5B,EAAW2B,GAClBE,EAAiBd,EAAmBa,GACpCE,GAAkBnB,EAAgBkB,EACtC,IAAKb,EAAmBc,GAAiB,iBACzC,IAAIC,EAAOf,EAAmBc,GAAgBE,KAAK,SAAAC,GAAC,OAAG,CAAC3B,EAAKsB,GAAMM,SAASD,KAC5E,IAAKF,EAAM,iBACX,IAAII,EAAUxB,EAAekB,EAAiBC,EAC1CM,EAAO,CAAC9B,EAAKsB,EAAMG,GACnBM,EAAYD,EAAKJ,KACjB,SAAAC,GAAC,OAAIlB,EAAmBkB,GAAKE,EAAU,IACvCG,EAAevB,EAAmBsB,GAClCE,EAAeH,EAAKI,OAAO,SAAAP,GAAC,OAAGA,IAAKI,IAcxC,OAbIC,EAAe,EACfC,EAAalD,QAAQ,SAAAoD,GAAG,OAAI3B,EAAOY,KAAK,CAACW,EAAWI,EAAK1B,EAAmB0B,OAG5EF,EAAalD,QAAQ,SAAAoD,GAAG,OAAI3B,EAAOY,KAAK,CAAEe,EAAKJ,GAAYtB,EAAmB0B,OAElFL,EAAK/C,QAAQ,SAAA4C,GACT,IAAIS,EAAY1B,EAAmBD,EAAmBkB,IAClDU,EAAOD,EAAUtB,QAAQa,GAC7BjB,EAAmBD,EAAmBkB,IACtCS,EAAUrB,MAAM,EAAEsB,GAAMrB,OAAOoB,EAAUrB,MAAMsB,EAAK,IACpD5B,EAAmBkB,GAAK,IAE5B,SAhE2E,EAsC/E,IAAK,IAAIN,EAAEJ,EAAE,EAAGI,EAAG3B,EAAWvE,OAAQkG,IAAI,UAAjCA,IAAiC,eAM3B,SAN2B,YA0BtC,WA7BAJ,EAAE,EAAGA,EAAEvB,EAAWvE,OAAQ8F,IAAK,EAA/BA,GAkCZ,IArEuF,eAqE/EA,GACJ,IAAIjB,EAAMN,EAAWuB,GAIrB,IAHGR,EAAmBT,KAClBU,EAAmBD,EAAmBT,IACtCU,EAAmBD,EAAmBT,IAAMY,QAAQZ,IAClDS,EAAmBf,EAAWuB,KAAI,CACpCjB,EAAMN,EAAWuB,GACpBZ,EAAgBI,EAAmBT,GACnC,IAAIsC,OAA6B,EASlC,QAAsCC,KAPlCD,EADA5B,GAAoBL,IAAkBK,GAAoBL,GAAelF,QACxCkF,EAGJhC,OAAOC,KAAKoC,GAAoBgB,KAC7D,SAAAc,GAAM,OAAIA,EAAQnC,EAAc,GAAKK,EAAmB8B,GAAQrH,UAGnB,MAAM,CAAN,EAAOqF,GACxD,IAAIiC,EAAU/B,EAAmB4B,GAA+BnB,MAC5DuB,EAAcxL,KAAKmI,IAAInI,KAAKyL,IAAIlC,EAAmBgC,IAAWvL,KAAKyL,IAAItC,IAC3EqC,EAAcrC,EAAgB,EAAIqC,GAAeA,EACjDlC,EAAOY,KAAKsB,EAAY,EAAG,CAAC1C,EAAKyC,EAASC,GAAe,CAACD,EAASzC,GAAM0C,IACzEjC,EAAmBT,IAAQ0C,EAC3BjC,EAAmBgC,IAAWC,EAC9B,IAAIE,EAA6BN,EAAgCI,EAC7DG,EAAiBnC,EAAmBkC,GAMxC,GALAlC,EAAmBkC,GAA8BC,EAEjDA,EAAe7B,OAAOyB,GAEtB,CAACA,GACEG,EAA4B,CAC/B,IAAIE,EAA4BpC,GAAoBkC,GAChDE,GAA6BA,EAA0B3H,SACvDuF,EAAmBkC,GACnBlC,EAAmBkC,GAA4BhC,QAAQ6B,GACvDnC,EAAiBwC,EAA0B3B,MAC3CX,EAAOY,KACPwB,EAA2B,EAC1B,CAACH,EAASnC,GAAiBsC,GAE3B,CAACtC,EAAgBmC,EAASG,IAE3BnC,EAAmBgC,GAAW,EAC9BhC,EAAmBH,GAAkB,GAKxC,GAFAN,EAAM,CAACA,EAAKyC,GAASf,KAAK,SAAAC,GAAC,OAA6B,IAAzBlB,EAAmBkB,KAClDtB,EAAgBI,EAAmBT,GAChCA,EAAI,CAAC,IAAD,WACCqB,GAED,IAAIC,EAAO5B,EAAW2B,GACtB,GAAGC,IAAStB,IAAQS,EAAmBa,GAAO,iBAC9C,IAAIC,EAAiBd,EAAmBa,GACpCE,GAAkBnB,EAAgBkB,EACtC,IAAKC,IAAmBd,EAAmBc,GAAiB,iBAC5D,IAAIC,EAAOf,EAAmBc,GAAgBE,KAAK,SAAAC,GAAC,OAAG,CAAC3B,EAAKsB,GAAMM,SAASD,KAC5E,IAAKF,EAAM,iBACX,IAAII,EAAUxB,EAAekB,EAAiBC,EAC1CM,EAAO,CAAC9B,EAAKsB,EAAMG,GACnBM,EAAYD,EAAKJ,KACjB,SAAAC,GAAC,OAAIlB,EAAmBkB,GAAKE,EAAU,IACvCG,EAAevB,EAAmBsB,GAClCE,EAAeH,EAAKI,OAAO,SAAAP,GAAC,OAAGA,IAAKI,IAsBxC,OArBIC,EAAe,EAEfC,EAAalD,QAAQ,SAAAoD,GACjB3B,EAAOY,KAAK,CAACW,EAAWI,EAAK1B,EAAmB0B,OAKpDF,EAAalD,QAAQ,SAAAoD,GAChB3B,EAAOY,KAAK,CAAEe,EAAKJ,GAAYtB,EAAmB0B,OAG3DL,EAAK/C,QAAQ,SAAA4C,GACT,GAAGA,IAAMjC,EAAWuB,GAAG,CACvB,IAAImB,EAAY1B,EAAmBD,EAAmBkB,IAClDU,EAAOD,EAAUtB,QAAQa,GAC7BjB,EAAmBD,EAAmBkB,IACtCS,EAAUrB,MAAM,EAAEsB,GAAMrB,OAAOoB,EAAUrB,MAAMsB,EAAK,IAExD5B,EAAmBkB,GAAK,IAExB,SArCA,EACR,IAAK,IAAIN,EAAE,EAAGA,EAAG3B,EAAWvE,OAAQkG,IAAI,UAA/BA,IAA+B,eAQrB,SARqB,YAoChC,aAtFJJ,EAAE,EAAGA,EAAEvB,EAAWvE,OAAQ8F,IAAI,CAAC,IAAD,IAA9BA,GAA8B,kCA4FtC,OAAOT,EAcqBuC,CAC5BjD,EACAC,EACAL,GACAsD,EAAuB,GACvBC,EAAwB9C,EAA0BxF,IAClD,SAAAuI,GACI,IAAIC,EAAiB,CAACD,EAAE,GAAIA,EAAE,GAAIhM,KAAKgJ,MAAMgD,EAAE,GAAKrD,EAAmBxH,GAAO,KAG9E,OAFA2K,EAAqBE,EAAE,IAAMF,EAAqBE,EAAE,KAAO,GAC3DF,EAAqBE,EAAE,IAAI9B,KAAK+B,GACzBA,IAcf,OAZA9E,OAAOC,KAAK0E,GAAsBjE,QAC9B,SAAAqE,GACI,IAAIxD,EAAuBwD,GAAW,CACtC,IAAIlG,EAAM,EACV8F,EAAqBI,GAAWrE,QAC5B,SAAAsE,GAAgBnG,GAAOmG,EAAY,KAEvC,IAAIC,EAAajH,EAAM+G,GAAalG,EACpC8F,EAAqBI,GAAW,GAAG,IAAME,KAI1CL,GC3IIM,E,YAzDX,WAAYpL,GAAO,IAAD,8BACd,4CAAMA,KACDkE,MAAM,CAACmH,iBAAkBrL,EAAMsL,QACpCC,gBAAiB,KACjB,EAAKC,eAAiB,EAAKA,eAAenG,KAApB,gBAJR,E,yEAMNqD,GACJ,OAAO,0BAAMnI,UAAU,W,qCAEhBmI,GACX3I,KAAKuE,SAAS,CAAC+G,iBAAkB3C,IACjC3I,KAAKC,MAAMyL,kBAAkB/C,K,yCAEdgD,GACZA,EAAUC,WAAa5L,KAAKC,MAAM2L,UACjC5L,KAAKuE,SAAS,CAAC+G,iBAAkBtL,KAAKC,MAAMsL,Y,+BAG3C,IAAD,SACsCvL,KAAKC,MAAxC4L,EADH,EACGA,WAAYC,EADf,EACeA,SAAUC,EADzB,EACyBA,UACvBC,EAAgB,IAAIvF,MAAMoF,EAAW,GAAGzL,KAAK,KACnD,OACI,6BACA,yBAAKI,UAAU,oBAAoBsL,GAEnC,yBAAKtL,UAAU,iBACf,yBAAKsD,OAAO,KAAKpE,MAAM,KAAKc,UAAY,kBACxC8F,MAAO,CAAC2F,KAAK,GAAD,OAAK,IAAIjM,KAAKmE,MAAMmH,iBAApB,QACR,8BACZ,oCAAgBY,GAAG,QAAQhN,GAAG,KAAKE,GAAG,KAAKG,GAAG,OAAOC,GAAG,MACtD,0BAAM2M,OAAO,KAAK7F,MAAO,CAAC8F,UAAU,mBAAoBC,YAAY,KACpE,0BAAMF,OAAO,OAAO7F,MAAO,CAAC8F,UAAU,mBAAoBC,YAAY,OAG1E,6BAASC,OAAO,2BAA2BhG,MAAO,CAAClG,KAAK,cAAeC,OAAQ,mBAAoBkM,YAAY,MAEjG,0BAAM/L,UAAY,cAClBG,QAAS,kBAAI,EAAK8K,eAAe,KAChCzL,KAAKwM,YAAY,IAEjBR,EAAcvJ,IAAI,SAACgK,EAAG9D,GAAJ,OAAY,0BAAMnI,UAAU,SAC/CG,QAAS,kBAAI,EAAK8K,eAAe9C,EAAI,KAChC,EAAK6D,YAAY7D,EAAI,MAE1B,0BAAMnI,UAAU,eAChBG,QAAS,kBAAI,EAAK8K,eAAe,EAAKxL,MAAM4L,WAAW,KACtD7L,KAAKwM,YAAYxM,KAAKC,MAAM4L,WAAW,KAI5C,yBAAKrL,UAAU,qBAAqBuL,Q,GAnDnBxE,IAAM9F,WC8GpBiL,E,YAjGX,WAAYzM,GAAO,IAAD,sBACd,4CAAMA,IACN,IAAI0M,EAAM,GAFI,OAGdnF,EAAWX,QAAQ,SAAAiB,GAAG,OAAI6E,EAAI7E,GAAK,UACnC6E,EAAG,uBAA4B9O,EAAW,EAAKoC,MAAM+F,eACrD2G,EAAIf,SAAW,EACf,EAAKzH,MAASwI,EACd,EAAKC,YAAc,EAAKA,YAAYtH,KAAjB,gBACnBuH,OAAOC,SAAW,EAAKA,SAASxH,KAAd,gBAClB,EAAKwG,SAAW,qCAChB,EAAKC,UAAY,kBAVH,E,wEAad,OAAO/L,KAAKmE,Q,qCAED4I,GACXC,QAAQC,IAAIF,EAAEhK,KACO,aAAamK,MAAM,IAAIpE,OACxC,CAAC,YAAa,MAAO,aAAc,cACrBY,SAASqD,EAAEhK,MAAMgK,EAAEI,mB,mCAE5BJ,EAAGjF,GACZ9H,KAAKuE,SAAL,eAAgBuD,EAAMiF,EAAEK,OAAOvM,U,oCAErB,IAAD,OACHsD,EAAQ,GACdqD,EAAWX,QAAQ,SAAAiB,GAAG,OAAI3D,EAAM2D,GAAOuF,WAAW,EAAKlJ,MAAM2D,GAAKe,MAAM,MACxE,IAAMyE,EFgK4B,SAASnJ,EAAOuD,EAAwBF,GAAyD,IAA7C+F,EAA4C,uDAAf,EAAGC,EAAY,uDAAH,GACvGC,GAAYF,EAA+B,KAAKC,EAAS,GACjFE,EAAU,CAACjG,EAA0BtD,EAAOuD,EAAwBF,EAAY,KAChFmG,EAA0BD,EAAQ,GAAGzK,OACzCuE,EAAaA,EAAWqB,QACxB,IAAK,IAAIE,EAAE,EAAGA,EAAEyE,EAAUzE,IACtB,IAAI,IAAII,EAAE,EAAGA,EAAE,EAAGA,IAAI,CAClB3B,EAAWoG,KAAK,kBAAI5O,KAAK6O,SAAS,KAEtC,IAAIC,EAAuBrG,EAA0BtD,EAAOuD,EAAwBF,EAD3D,GAAKuB,EAAE0E,GAE5BK,EAAqB7K,OAAS0K,IAC9BA,EAA0BG,EAAqB7K,OAG/CyK,EAAQxE,KAAK4E,IAIrB,OAAOJ,EElLwBK,CAA2B5J,EAClDnE,KAAKmE,MAAMuD,uBACXF,GACJxH,KAAKuE,SAAS,CAAC+I,qBAAoBU,UAAW,EAC9CpC,SAAU5L,KAAKmE,MAAMyH,SAAW,M,6CAEb,IAAD,OACdqC,EAASjO,KAAKmE,MAAMmJ,mBAAmBtN,KAAKmE,MAAM6J,WACtD,OAAO,6BACH,wBAAIxN,UAAU,sBACbyN,EAAOxL,IAAI,SAACuI,EAAErC,GAAH,OACR,wBAAI5F,IAAK4F,GAAT,YAAwB,IAAIqC,EAAE,GAAGxF,QAAQ,GAAzC,SAAmDwF,EAAE,GAArD,OAA6DA,EAAE,OAGlEhL,KAAKmE,MAAMmJ,mBAAmBrK,OAAO,EACtC,yBAAKzC,UAAU,yBAAf,IAAwC,0BAAM8F,MAAO,CAACY,aAAc,OACpEgH,QAAS,iBAD+B,oCAEpC,kBAAC,EAAD,CAAgBrC,WAAY7L,KAAKmE,MAAMmJ,mBAAmBrK,OAC1D2I,SAAU5L,KAAKmE,MAAMyH,SACrBL,QAAS,EACTG,kBAAmB,SAAAsC,GAAS,OAAE,EAAKzJ,SAAS,CAACyJ,eAC7ClC,SAAU9L,KAAK8L,SACfC,UAAW/L,KAAK+L,aAEd,Q,mCAGDgB,GACT,IAAIoB,EAAMpB,EAAEK,OAAOvM,MACnBkM,EAAEK,OAAOvM,MAAgB,UAARsN,EAAkB,GAAKA,EAAIjB,MAAM,KAAK,GAAGrE,MAAM,K,kCAExDkE,EAAGjF,GACX,IAAIqG,EAAMpB,EAAEK,OAAOvM,OAAS,IAC5Bb,KAAKuE,SAAL,eAAgBuD,EAAM,IAAMqG,EAAM,QAClCpB,EAAEK,OAAOvM,MAAQ,IAAMsN,EAAM,Q,+BAExB,IAAD,OACJ,OAAQ,yBAAK3N,UAAY,QACrB,yBAAKA,UAAY,gBACjB,yBAAKA,UAAU,qBAAqB8F,MAAO,CAACW,SAAU,UACtD,yBAAKX,MAAO,CAAC8H,UAAW,SAAxB,+HAIY,2BAAO5N,UAAU,oBACzB,+BACCgH,EAAW/E,IAAI,SAAAqF,GAAG,OACnB,wBAAI/E,IAAK+E,GACN,wBAAItH,UAAU,eAAesH,EAA7B,KACA,4BAAI,2BACJuG,QAAS,SAAAtB,GAAC,OAAE,EAAKuB,aAAavB,IAC9BwB,OAAQ,SAAAxB,GAAC,OAAE,EAAKyB,YAAYzB,EAAGjF,IAC/B2G,aAAe,QACfjO,UAAY,cACZkO,UAAW,EAAKC,eAChBC,QAAS,SAAA7B,GAAC,OAAEA,EAAEI,0BAMd,4BAAQxM,QAAS,kBAAIoF,WAAW,EAAK6G,YAAY,MAAjD,8BAGA5M,KAAKmE,MAAMmJ,mBAAqBtN,KAAKsH,uBAAyB,W,GA5FzDC,IAAM9F,WCgBfoN,E,YA1BX,WAAY5O,GAAO,IAAD,8BACd,4CAAMA,KACDkE,MAAQ,CAACyB,WAAY,GAE1B,EAAKY,SAAW,EAAKA,SAASlB,KAAd,gBAChB,EAAKW,iBAAmB,EAAKA,iBAAiBX,KAAtB,gBALV,E,wEAQdtF,KAAKuE,SAAS,CAACqB,WAAY5F,KAAKmE,MAAMyB,WAAa,M,uCAEtC/E,GACbb,KAAKuE,SAAS,CAACyB,cAAenF,M,+BAG9B,IAAIiO,EAAM,KAMV,OAL6B,IAA1B9O,KAAKmE,MAAMyB,WACVkJ,EAAO,kBAAC,EAAD,CAAWtI,SAAUxG,KAAKwG,SACjCP,iBAAoBjG,KAAKiG,mBACK,IAA1BjG,KAAKmE,MAAMyB,aACfkJ,EAAO,kBAAC,EAAD,CAAW9I,cAAehG,KAAKmE,MAAM6B,iBACzC,iCAAO8I,O,GArBMvH,IAAM9F,WCanBsN,MAZf,WACE,OACE,yBAAK7C,GAAG,OACN,4BAAQ1L,UAAU,eAIlB,kBAAC,EAAD,QCCcwO,QACW,cAA7BnC,OAAOoC,SAASC,UAEe,UAA7BrC,OAAOoC,SAASC,UAEhBrC,OAAOoC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS1I,SAAS2I,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.cb368bc6.chunk.js","sourcesContent":["const Portfolios={\r\n    1: {\"money market\": 50, \"government bonds\": 30, \"equity mutual funds\": 20},\r\n    2: {\"money market\": 30, \"government bonds\": 30, \r\n        \"equity mutual funds\": 20, \"real estate\": 20},\r\n    3: {\"government bonds\": 30, \"money market\": 15,  \r\n    \"equity mutual funds\": 35, \"real estate\": 20},\r\n    4: {\"government bonds\": 20, \"equity mutual funds\": 40, \r\n    \"real estate\": 25, futures: 15},\r\n    5: {\"equity mutual funds\": 35, \"government bonds\": 15,  \r\n    \"real estate\": 30, futures: 20},\r\n    6: { \"equity mutual funds\": 40, \"real estate\": 25, \r\n    futures: 20, options: 15    \r\n    },\r\n    7: { \"real estate\": 40, \"equity mutual funds\": 25, futures: 20, options: 15},\r\n    8: {futures: 30, \"real estate\": 35, options: 20, \"equity mutual funds\": 15},\r\n    9: {options: 35, futures: 35, \"real estate\": 15, \"equity mutual funds\": 15},\r\n    10: {options: 50, futures: 30, \"real estate\": 20}\r\n}\r\n\r\n\r\nexport default Portfolios","/**\r\n * @fileOverview ArcPath component.\r\n * Rendered chart section dictated by each item.\r\n * @name ArcPath.js\r\n * @author JJ Naughton\r\n * @license MIT\r\n */\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n/**\r\n * Calculate coordinates of given arc.\r\n * @param {number} half - Half the total width of the chart.\r\n * @param {number} radius - Radius of the arc.\r\n * @param {number} startAngle - Starting angle for the arc.\r\n * @param {number} endAngle - Ending angle for the arc.\r\n */\r\nfunction coordinates(half, radius, startAngle, endAngle) {\r\n    const startAngleDegrees = (Math.PI * startAngle) / 180;\r\n    const x1 = half + ((half * radius) * Math.cos(startAngleDegrees));\r\n    const y1 = half + ((half * radius) * Math.sin(startAngleDegrees));\r\n    const endAngleDegrees = (Math.PI * endAngle) / 180;\r\n    const x2 = half + ((half * radius) * Math.cos(endAngleDegrees));\r\n    const y2 = half + ((half * radius) * Math.sin(endAngleDegrees));\r\n\r\n    return {\r\n        x1,\r\n        y1,\r\n        x2,\r\n        y2\r\n    };\r\n}\r\n\r\n/**\r\n * Creates an SVG arc object for an SVG path object.\r\n * @param {number} width - Total width of the chart.\r\n * @param {number} radius - Radius of the arc.\r\n * @param {string} largeArcFlag - Flag for angles over 180 degrees.\r\n * @param {number} x - X coordinate for arc.\r\n * @param {number} y - Y coordinate for arc.\r\n */\r\nfunction arc(width, radius, largeArcFlag, x, y) {\r\n    const z = (width / 2) * radius;\r\n\r\n    return `A${z}, ${z} 0 ${largeArcFlag} ${x}, ${y}`;\r\n}\r\n\r\n\r\n/**\r\n * Creates the SVG path object for an item.\r\n * @param {number} value - Value of incoming item.\r\n * @param {number} total - Culmulative value of all items\r\n * @param {number} startAngle - Degree at which the angle calculation should begin.\r\n * @param {number} width - Total width of the chart.\r\n * @param {number} innerRadius - Inner circle's radius.\r\n * @param {number} outerRadius - Outer circle's radius.\r\n */\r\nfunction path(activeAngle, startAngle, width, innerRadius, outerRadius) {\r\n    const endAngle = startAngle + activeAngle;\r\n\r\n    const largeArcFlagOuter = activeAngle > 180 ? '1 1' : '0 1';\r\n    const largeArcFlagInner = activeAngle > 180 ? '1 0' : '0 0';\r\n    const half = width / 2;\r\n    const outerCoords = coordinates(half, outerRadius, startAngle, endAngle);\r\n    const innerCoords = coordinates(half, innerRadius, startAngle, endAngle);\r\n\r\n    const outerArc = arc(\r\n        width, outerRadius, largeArcFlagOuter,\r\n        outerCoords.x2, outerCoords.y2\r\n    );\r\n    const innerArc = arc(\r\n        width, innerRadius, largeArcFlagInner,\r\n        innerCoords.x1, innerCoords.y1\r\n    );\r\n\r\n    return `M${outerCoords.x1},${outerCoords.y1}\r\n    ${outerArc}\r\n    L${innerCoords.x2},${innerCoords.y2}\r\n    ${innerArc} z`;\r\n}\r\n\r\n/**\r\n * @extends {Component}\r\n */\r\nexport default class ArcPath extends Component {\r\n    /* React render function */\r\n    render() {\r\n        const {\r\n            width, angle, total, fill, stroke, opacity, item, className,\r\n            innerRadius, outerRadius, onClick, onMouseEnter\r\n        } = this.props;\r\n        const { value } = item;\r\n        const activeAngle = (Number.isNaN(value / total)\r\n        || ((total / value) === 1)) ? 359.99 : (value / total) * 360;\r\n        const d = path(activeAngle, angle, width, innerRadius, outerRadius);\r\n        return <path\r\n            onClick={ () => onClick(item) }\r\n            onMouseEnter={ () => onMouseEnter(item) }\r\n            className={ className }\r\n            d={ d }\r\n            stroke={ stroke }\r\n            fill={ fill }\r\n            opacity={ opacity }>\r\n        </path>;\r\n    }\r\n}\r\n\r\n// ArcPath.propTypes = {\r\n//     item: PropTypes.shape({\r\n//         value: PropTypes.number.isRequired,\r\n//         label: PropTypes.string.isRequired,\r\n//         className: PropTypes.string,\r\n//         isEmpty: PropTypes.boolean\r\n//     }).isRequired,\r\n//     total: PropTypes.number.isRequired,\r\n//     angle: PropTypes.number.isRequired,\r\n//     width: PropTypes.number,\r\n//     innerRadius: PropTypes.number.isRequired,\r\n//     outerRadius: PropTypes.number.isRequired,\r\n//     onMouseEnter: PropTypes.func.isRequired,\r\n//     onClick: PropTypes.func.isRequired,\r\n//     fill: PropTypes.string,\r\n//     stroke: PropTypes.string,\r\n//     opacity: PropTypes.number,\r\n//     className: PropTypes.string\r\n// };\r\n\r\nArcPath.defaultProps = {\r\n    item: {\r\n        label: '',\r\n        value: 100,\r\n        isEmpty: true\r\n    },\r\n    total: 100,\r\n    angle: 0,\r\n    width: 500,\r\n    innerRadius: 0.70,\r\n    outerRadius: 0.90,\r\n    onMouseEnter: item => item,\r\n    onClick: item => item,\r\n    fill: '#e0e0e0',\r\n    stroke: '#e0e0e0',\r\n    opacity: 1,\r\n    className: 'donutchart-arcs-path'\r\n};\r\n","/**\r\n * @fileOverview Aggregation of ArcPath components.\r\n * Orchestrates the rendering of the chart sections,\r\n * based on each item's value.\r\n * @name Arcs.js\r\n * @author JJ Naughton\r\n * @license MIT\r\n */\r\nimport React, { Component } from 'react';\r\nimport classnames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport ArcPath from './ArcPath';\r\n\r\n/**\r\n * @extends {Component}\r\n */\r\nexport default class Arcs extends Component {\r\n    /* React render function */\r\n    render() {\r\n        const {\r\n            startAngle, className, data, selectedOffset, toggledOffset,\r\n            emptyOffset, colors, emptyColor, strokeColor, colorFunction,\r\n            onMouseEnter, onClick, total, width,\r\n            selected, toggleSelect\r\n        } = this.props;\r\n        const arcPathClassName = `${className}-path`;\r\n        let angle = startAngle;\r\n\r\n        return <g\r\n            className={ className }>\r\n            { data.map((item, index) => {\r\n                const classes = {};\r\n                const { value, isEmpty, className } = item;\r\n\r\n                let { innerRadius, outerRadius } = this.props;\r\n                let stroke = strokeColor;\r\n                let opacity = 1;\r\n\r\n                if (isEmpty) {\r\n                    classes.empty = true;\r\n                    innerRadius += emptyOffset;\r\n                    outerRadius -= emptyOffset;\r\n                    stroke = emptyColor;\r\n                } else if (selected.label === item.label) {\r\n                    if (toggleSelect) {\r\n                        classes.toggled = true;\r\n                        innerRadius -= toggledOffset;\r\n                        outerRadius += toggledOffset;\r\n                        opacity = 1;\r\n                    } else {\r\n                        classes.selected = true;\r\n                        outerRadius += selectedOffset;\r\n                        opacity = 0.5;\r\n                    }\r\n                }\r\n\r\n                if (className) {\r\n                    classes[className] = true;\r\n                }\r\n                classes[arcPathClassName] = true;\r\n\r\n                const fill = isEmpty ? emptyColor : colorFunction(colors, index);\r\n\r\n                const arcPath = <ArcPath\r\n                    width={ width }\r\n                    item={ item }\r\n                    key={ `arcpath${index}` }\r\n                    innerRadius={ innerRadius } outerRadius={ outerRadius }\r\n                    className={ classnames(classes) }\r\n                    opacity={ opacity }\r\n                    fill={ fill }\r\n                    stroke={ stroke }\r\n                    angle={ angle }\r\n                    total={ total }\r\n                    onMouseEnter={ onMouseEnter }\r\n                    onClick={ onClick }\r\n                />;\r\n\r\n                angle += (value / total) * 360;\r\n\r\n                return arcPath;\r\n            }) }\r\n        </g>;\r\n    }\r\n}\r\n\r\n// Arcs.propTypes = {\r\n//     data: PropTypes.arrayOf(PropTypes.shape({\r\n//         value: PropTypes.number.isRequired,\r\n//         label: PropTypes.string.isRequired,\r\n//         className: PropTypes.string,\r\n//         isEmpty: PropTypes.boolean\r\n//     })).isRequired,\r\n//     selected: PropTypes.shape({\r\n//         value: PropTypes.number.isRequired,\r\n//         label: PropTypes.string.isRequired,\r\n//         className: PropTypes.string,\r\n//         isEmpty: PropTypes.boolean\r\n//     }).isRequired,\r\n//     toggleSelect: PropTypes.bool.isRequired,\r\n//     total: PropTypes.number.isRequired,\r\n//     width: PropTypes.number.isRequired,\r\n//     innerRadius: PropTypes.number.isRequired,\r\n//     outerRadius: PropTypes.number.isRequired,\r\n//     selectedOffset: PropTypes.number.isRequired,\r\n//     emptyOffset: PropTypes.number.isRequired,\r\n//     toggledOffset: PropTypes.number.isRequired,\r\n//     onMouseEnter: PropTypes.func.isRequired,\r\n//     onClick: PropTypes.func.isRequired,\r\n//     className: PropTypes.string,\r\n//     colors: PropTypes.arrayOf(PropTypes.string),\r\n//     emptyColor: PropTypes.string,\r\n//     stokeColor: PropTypes.string,\r\n//     startAngle: PropTypes.number,\r\n//     colorFunction: PropTypes.func\r\n// };\r\n\r\nArcs.defaultProps = {\r\n    data: [{\r\n        label: '',\r\n        value: 100,\r\n        isEmpty: true\r\n    }],\r\n    selected: {\r\n        value: 100,\r\n        label: '',\r\n        isEmpty: true\r\n    },\r\n    toggleSelect: false,\r\n    total: 100,\r\n    className: 'donutchart-arcs',\r\n    width: 500,\r\n    colors: ['#f44336', '#e91e63', '#9c27b0', '#673ab7',\r\n        '#3f51b5', '#2196f3', '#03a9f4', '#00bcd4',\r\n        '#009688', '#4caf50', '#8bc34a', '#cddc39',\r\n        '#ffeb3b', '#ffc107', '#ff9800', '#ff5722',\r\n        '#795548', '#607d8b'],\r\n    emptyColor: '#e0e0e0',\r\n    strokeColor: '#212121',\r\n    startAngle: 0,\r\n    colorFunction: (colors, index) => colors[(index % colors.length)],\r\n    innerRadius: 0.70,\r\n    outerRadius: 0.90,\r\n    selectedOffset: 0.03,\r\n    emptyOffset: 0.08,\r\n    toggledOffset: 0.04,\r\n    onMouseEnter: item => item,\r\n    onClick: item => item\r\n};\r\n","/**\r\n * @fileOverview The text component in the Donut Chart inner circle.\r\n * Shows the selected item's label and value\r\n * @name DonutInnerText.js\r\n * @author JJ Naughton\r\n * @license MIT\r\n */\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @extends {Component}\r\n */\r\nexport default class DonutInnerText extends Component {\r\n    /* React render function */\r\n    render() {\r\n        const {\r\n            item, className, width, formatValues, total\r\n        } = this.props;\r\n        const { label } = item;\r\n        const { value } = item;\r\n        const half = width / 2;\r\n        const labelClassName = `${className}-label`;\r\n        const valueClassName = `${className}-value`;\r\n\r\n        return <g className={ className }>\r\n            <text\r\n                className={ labelClassName }\r\n                x={ half }\r\n                y=\"45%\"\r\n                textAnchor=\"middle\">\r\n                { label }\r\n            </text>\r\n            <text\r\n                className={ valueClassName }\r\n                x={ half }\r\n                y=\"60%\"\r\n                textAnchor=\"middle\">\r\n                { formatValues(value, total) }\r\n            </text>\r\n        </g>;\r\n    }\r\n}\r\n\r\n// DonutInnerText.propTypes = {\r\n//     item: PropTypes.shape({\r\n//         value: PropTypes.number.isRequired,\r\n//         label: PropTypes.string.isRequired,\r\n//         className: PropTypes.string,\r\n//         isEmpty: PropTypes.boolean\r\n//     }).isRequired,\r\n//     className: PropTypes.string,\r\n//     total: PropTypes.number,\r\n//     width: PropTypes.number,\r\n//     formatValues: PropTypes.func\r\n// };\r\n\r\nDonutInnerText.defaultProps = {\r\n    item: {\r\n        label: '',\r\n        value: 100,\r\n        isEmpty: true\r\n    },\r\n    total: 100,\r\n    className: 'donutchart-innertext',\r\n    width: 500,\r\n    formatValues: value => value\r\n};\r\n","/**\r\n * @fileOverview LegendItem component.\r\n * Rendered SVG box, label, and value for each item.\r\n * @name LegendItem.js\r\n * @author JJ Naughton\r\n * @license MIT\r\n */\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @extends {Component}\r\n */\r\nexport default class LegendItem extends Component {\r\n    /* React render function */\r\n    render() {\r\n        const {\r\n            className, item, index, onClick, onMouseEnter, fill, opacity,\r\n            width, totalWidth, stroke\r\n        } = this.props;\r\n        const { label, value } = item;\r\n\r\n        const legendRectClassName = `${className}-rect`;\r\n        const legendLabelClassName = `${className}-label`;\r\n        const sqUnit = width / 10;\r\n        const yOffset = 1.5;\r\n\r\n        const position = `translate(${totalWidth - width},\r\n${((index * yOffset) * sqUnit)})`;\r\n        return <g\r\n            transform={ position }\r\n            className= { className }\r\n            onClick={ () => { onClick(item); } }\r\n            onMouseEnter={ () => { onMouseEnter(item); } }>\r\n            <rect\r\n                className={ legendRectClassName }\r\n                width={ sqUnit }\r\n                height={ sqUnit }\r\n                fill={ fill }\r\n                opacity={ opacity }\r\n                stroke={ stroke }>\r\n            </rect>\r\n            <text\r\n                className={ legendLabelClassName }\r\n                x={ sqUnit + (sqUnit / 2) }\r\n                y= { sqUnit / 2 }\r\n                dy=\".35em\">\r\n                { `${label} - ${value}`}\r\n            </text>\r\n        </g>;\r\n    }\r\n}\r\n\r\n// LegendItem.propTypes = {\r\n//     item: PropTypes.shape({\r\n//         value: PropTypes.number.isRequired,\r\n//         label: PropTypes.string.isRequired,\r\n//         className: PropTypes.string,\r\n//         isEmpty: PropTypes.boolean\r\n//     }).isRequired,\r\n//     width: PropTypes.number.isRequired,\r\n//     totalWidth: PropTypes.number.isRequired,\r\n//     onMouseEnter: PropTypes.func.isRequired,\r\n//     onClick: PropTypes.func.isRequired,\r\n//     index: PropTypes.number,\r\n//     opacity: PropTypes.number,\r\n//     stroke: PropTypes.string,\r\n//     fill: PropTypes.string,\r\n//     className: PropTypes.string\r\n// };\r\n\r\nLegendItem.defaultProps = {\r\n    item: {\r\n        label: '',\r\n        value: 100,\r\n        isEmpty: true\r\n    },\r\n    index: 0,\r\n    opacity: 1,\r\n    fill: '#e0e0e0',\r\n    stroke: '#e0e0e0',\r\n    className: 'donutchart-legend-item',\r\n    width: 250,\r\n    totalWidth: 750,\r\n    onMouseEnter: item => item,\r\n    onClick: item => item\r\n};\r\n","/**\r\n * @fileOverview Legend component.\r\n * Orchestrates all rendering each LegendItem component,\r\n * based on each item.\r\n * @name Legend.js\r\n * @author JJ Naughton\r\n * @license MIT\r\n */\r\nimport React, { Component } from 'react';\r\nimport classnames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport LegendItem from './LegendItem';\r\n\r\n/**\r\n * @extends {Component}\r\n */\r\nexport default class Legend extends Component {\r\n    /* React render function */\r\n    render() {\r\n        const {\r\n            className, data, strokeColor, emptyColor, colorFunction, colors,\r\n            width, totalWidth, onClick, onMouseEnter, toggleSelect, selected\r\n        } = this.props;\r\n\r\n        const legendItemClassName = `${className}-item`;\r\n        return <g\r\n            className={ className }>\r\n            { data.map((item, index) => {\r\n                const classes = {};\r\n                const { isEmpty, className } = item;\r\n                let stroke = strokeColor;\r\n                let opacity = 1;\r\n\r\n                if (isEmpty) {\r\n                    classes.empty = true;\r\n                    stroke = emptyColor;\r\n                } else if (selected.label === item.label) {\r\n                    if (toggleSelect) {\r\n                        classes.toggled = true;\r\n                        opacity = 1;\r\n                    } else {\r\n                        classes.selected = true;\r\n                        opacity = 0.5;\r\n                    }\r\n                }\r\n\r\n                if (className) {\r\n                    classes[className] = true;\r\n                }\r\n\r\n                classes[legendItemClassName] = true;\r\n\r\n                const fill = isEmpty ? emptyColor : colorFunction(colors, index);\r\n\r\n                return <LegendItem\r\n                    key={ `legenditem${index}` }\r\n                    index={ index }\r\n                    item={ item }\r\n                    className={ classnames(classes) }\r\n                    width={ width }\r\n                    totalWidth={ totalWidth }\r\n                    opacity={ opacity }\r\n                    fill= { fill }\r\n                    stroke={ stroke }\r\n                    onClick={ onClick }\r\n                    onMouseEnter={ onMouseEnter }\r\n                />;\r\n            }) }\r\n        </g>;\r\n    }\r\n}\r\n\r\n// Legend.propTypes = {\r\n//     data: PropTypes.arrayOf(PropTypes.shape({\r\n//         value: PropTypes.number.isrequired,\r\n//         label: PropTypes.string.isrequired,\r\n//         className: PropTypes.string,\r\n//         isEmpty: PropTypes.boolean\r\n//     })).isRequired,\r\n//     selected: PropTypes.shape({\r\n//         value: PropTypes.number.isRequired,\r\n//         label: PropTypes.string.isRequired,\r\n//         className: PropTypes.string,\r\n//         isEmpty: PropTypes.boolean\r\n//     }).isRequired,\r\n//     toggleSelect: PropTypes.bool.isRequired,\r\n//     colorFunction: PropTypes.func.isRequired,\r\n//     onMouseEnter: PropTypes.func.isRequired,\r\n//     onClick: PropTypes.func.isRequired,\r\n//     width: PropTypes.number.isRequired,\r\n//     totalWidth: PropTypes.number.isRequired,\r\n//     className: PropTypes.string,\r\n//     colors: PropTypes.arrayOf(PropTypes.string),\r\n//     emptyColor: PropTypes.string,\r\n//     strokeColor: PropTypes.string\r\n// };\r\n\r\nLegend.defaultProps = {\r\n    data: [{\r\n        label: '',\r\n        value: 100,\r\n        isEmpty: true\r\n    }],\r\n    selected: {\r\n        value: 100,\r\n        label: '',\r\n        isEmpty: true\r\n    },\r\n    toggleSelect: false,\r\n    className: 'donutchart-legend',\r\n    width: 250,\r\n    totalWidth: 750,\r\n    colors: ['#f44336', '#e91e63', '#9c27b0',\r\n        '#673ab7', '#3f51b5', '#2196f3',\r\n        '#03a9f4', '#00bcd4', '#009688',\r\n        '#4caf50', '#8bc34a', '#cddc39',\r\n        '#ffeb3b', '#ffc107', '#ff9800',\r\n        '#ff5722', '#795548', '#607d8b'],\r\n    emptyColor: '#e0e0e0',\r\n    strokeColor: '#212121',\r\n    colorFunction: (colors, index) => colors[(index % colors.length)],\r\n    onMouseEnter: item => item,\r\n    onClick: item => item\r\n};\r\n","/**\r\n * @fileOverview Main Donut Chart entry point.\r\n * Orchestrates all rendering for the chart, passing props to\r\n * Arcs, DonutInnerText, and Legend children components.\r\n * @name DonutChart.js\r\n * @author JJ Naughton\r\n * @license MIT\r\n */\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Arcs from './Arcs';\r\nimport DonutInnerText from './DonutInnerText';\r\nimport Legend from './Legend';\r\n\r\n\r\n/**\r\n * Calculates the total of all the items' value,\r\n * using a reduce function over the items.\r\n * @param {} items - An array of items, each with values, at least.\r\n */\r\nfunction calculateTotal(items) {\r\n    return items.reduce((sum, currItem) => sum + currItem.value, 0);\r\n}\r\n\r\n/**\r\n * @extends {Component}\r\n */\r\nexport default class DonutChart extends Component {\r\n    /**\r\n    * Represents a DonutChart.\r\n    * @constructor\r\n    * @param {} props - Object of propTypes with defaultProps as fallback.\r\n    */\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const { data } = props;\r\n\r\n        this.state = {\r\n            selected: data[0],\r\n            toggleSelect: false\r\n        };\r\n    }\r\n\r\n    componentWillReceiveProps(newProps) {\r\n        const { data } = newProps;\r\n\r\n        // if new data, reset\r\n        if (data && (JSON.stringify(data)\r\n                    !== JSON.stringify(this.props.data))) {\r\n            this.setState({\r\n                selected: data[0],\r\n                toggleSelect: false\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles the clicking of an ArcPath region.\r\n     * Toggles the selected state,\r\n     * effectively freezing all handlers on other, unselected items.\r\n     * Calls the onClick handler,\r\n     * passed by the user as a prop,\r\n     * providing the item clicked,\r\n     * as well as whether it's becoming selected or unselected.\r\n     * @param {} item - The item object selected, with a label and a value, at least.\r\n     */\r\n    handleClick(item) {\r\n        if (this.state.selected.label === item.label) {\r\n            const toggle = this.props.clickToggle ? !this.state.toggleSelect : false;\r\n            this.setState({\r\n                toggleSelect: toggle,\r\n                selected: item\r\n            });\r\n            this.props.onClick(item, toggle);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles the mouseenter event over an ArcPath region.\r\n     * Sets the clicked item as selected in the state object.\r\n     * @param {} item - The item object selected, with a label and a value, at least.\r\n     */\r\n    handleMouseEnter(item) {\r\n        if (!this.state.toggleSelect) {\r\n            this.setState({\r\n                selected: item\r\n            });\r\n            this.props.onMouseEnter(item);\r\n        }\r\n    }\r\n\r\n    /* React render function */\r\n    render() {\r\n        const {\r\n            startAngle, width, height, formatValues, className, data, legend,\r\n            emptyColor, strokeColor, colors, colorFunction, innerRadius,\r\n            outerRadius, emptyOffset, selectedOffset, toggledOffset\r\n        } = this.props;\r\n\r\n        const arcsClassName = `${className}-arcs`;\r\n        const innerTextClassName = `${className}-innertext`;\r\n        const legendClassName = `${className}-legend`;\r\n\r\n        const checkData = data.length ? data : [{\r\n            label: '',\r\n            value: 100,\r\n            isEmpty: true\r\n        }];\r\n\r\n        const total = calculateTotal(checkData);\r\n        const twoThirds = 2 / 3;\r\n        const graphWidth = legend ? (width * twoThirds) : width;\r\n        const legendWidth = width - graphWidth;\r\n\r\n        return <svg className={ className }\r\n            // width={ width }\r\n            // height={ height }\r\n            viewBox={`0 0 1000 ${height}`}\r\n            >\r\n            <Arcs\r\n                className={ arcsClassName }\r\n                colors={ colors }\r\n                data={ checkData }\r\n                width={ graphWidth }\r\n                emptyColor={ emptyColor }\r\n                strokeColor={ strokeColor }\r\n                colorFunction={ colorFunction }\r\n                onMouseEnter={ this.handleMouseEnter.bind(this) }\r\n                onClick={ this.handleClick.bind(this) }\r\n                selected={ this.state.selected }\r\n                startAngle = { startAngle }\r\n                toggleSelect={ this.state.toggleSelect }\r\n                innerRadius={ innerRadius }\r\n                outerRadius={ outerRadius }\r\n                selectedOffset={ selectedOffset }\r\n                toggledOffset={ toggledOffset }\r\n                emptyOffset={ emptyOffset }\r\n                total={ total } />\r\n            <DonutInnerText\r\n                item={ this.state.selected }\r\n                width={ graphWidth }\r\n                formatValues={ formatValues }\r\n                total={ total }\r\n                className= { innerTextClassName } />\r\n            { legend ?\r\n                <Legend\r\n                    data={ checkData }\r\n                    totalWidth={ width }\r\n                    width={ legendWidth }\r\n                    colors={ colors }\r\n                    emptyColor={ emptyColor }\r\n                    strokeColor={ strokeColor }\r\n                    colorFunction={ colorFunction }\r\n                    onMouseEnter={ this.handleMouseEnter.bind(this) }\r\n                    onClick={ this.handleClick.bind(this) }\r\n                    selected={ this.state.selected }\r\n                    toggleSelect={ this.state.toggleSelect}\r\n                    className={ legendClassName } />\r\n                : null }\r\n        </svg>;\r\n    }\r\n}\r\n\r\nDonutChart.propTypes = {\r\n    data: PropTypes.arrayOf(PropTypes.shape({\r\n        value: PropTypes.number.isRequired,\r\n        label: PropTypes.string.isRequired,\r\n        className: PropTypes.string,\r\n        isEmpty: PropTypes.boolean\r\n    })).isRequired,\r\n    className: PropTypes.string,\r\n    height: PropTypes.number,\r\n    width: PropTypes.number,\r\n    colors: PropTypes.arrayOf(PropTypes.string),\r\n    emptyColor: PropTypes.string,\r\n    stokeColor: PropTypes.string,\r\n    startAngle: PropTypes.number,\r\n    colorFunction: PropTypes.func,\r\n    innerRadius: PropTypes.number,\r\n    outerRadius: PropTypes.number,\r\n    selectedOffset: PropTypes.number,\r\n    emptyOffset: PropTypes.number,\r\n    toggledOffset: PropTypes.number,\r\n    formatValues: PropTypes.func,\r\n    onMouseEnter: PropTypes.func,\r\n    onClick: PropTypes.func,\r\n    legend: PropTypes.bool,\r\n    clickToggle: PropTypes.bool\r\n};\r\n\r\nDonutChart.defaultProps = {\r\n    data: [{\r\n        label: '',\r\n        value: 100,\r\n        isEmpty: true\r\n    }],\r\n    className: 'donutchart',\r\n    height: 500,\r\n    width: 750,\r\n    colors: ['#f44336', '#e91e63', '#9c27b0', '#673ab7',\r\n        '#3f51b5', '#2196f3', '#03a9f4', '#00bcd4',\r\n        '#009688', '#4caf50', '#8bc34a', '#cddc39',\r\n        '#ffeb3b', '#ffc107', '#ff9800', '#ff5722',\r\n        '#795548', '#607d8b'],\r\n    emptyColor: '#e0e0e0',\r\n    strokeColor: '#212121',\r\n    startAngle: 0,\r\n    colorFunction: (colors, index) => colors[(index % colors.length)],\r\n    innerRadius: 0.70,\r\n    outerRadius: 0.90,\r\n    selectedOffset: 0.03,\r\n    emptyOffset: 0.08,\r\n    toggledOffset: 0.04,\r\n    formatValues: (value, total) => (\r\n        Number.isNaN(value / total) ? '--'\r\n            : `${((value / total) * 100).toFixed(2)}%`\r\n    ),\r\n    onMouseEnter: item => item,\r\n    onClick: (item, toggled) => (toggled ? item : null),\r\n    legend: true,\r\n    clickToggle: true\r\n};\r\n","/**\r\n * @fileOverview The text component in the Donut Chart inner circle.\r\n * Shows the selected item's label and value\r\n * @name DonutInnerText.js\r\n * @author JJ Naughton\r\n * @license MIT\r\n */\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * @extends {Component}\r\n */\r\nexport default class DonutInnerText extends Component {\r\n    /* React render function */\r\n    render() {\r\n        const {\r\n            item, className, width, formatValues, total\r\n        } = this.props;\r\n        const { label } = item;\r\n        const { value } = item;\r\n        const half = width / 2;\r\n        const labelClassName = `${className}-label`;\r\n        const valueClassName = `${className}-value`;\r\n\r\n        return <g className={ className }>\r\n            <text\r\n                className={ labelClassName }\r\n                x={ half }\r\n                y=\"30%\"\r\n                textAnchor=\"middle\">\r\n                { label }\r\n            </text>\r\n            <text\r\n                className={ valueClassName }\r\n                x={ half }\r\n                y=\"50%\"\r\n                textAnchor=\"middle\">\r\n                { formatValues(value, total) }\r\n            </text>\r\n        </g>;\r\n    }\r\n}\r\n\r\n// DonutInnerText.propTypes = {\r\n//     item: PropTypes.shape({\r\n//         value: PropTypes.number.isRequired,\r\n//         label: PropTypes.string.isRequired,\r\n//         className: PropTypes.string,\r\n//         isEmpty: PropTypes.boolean\r\n//     }).isRequired,\r\n//     className: PropTypes.string,\r\n//     total: PropTypes.number,\r\n//     width: PropTypes.number,\r\n//     formatValues: PropTypes.func\r\n// };\r\n\r\nDonutInnerText.defaultProps = {\r\n    item: {\r\n        label: '',\r\n        value: 100,\r\n        isEmpty: true\r\n    },\r\n    total: 100,\r\n    className: 'donutchart-innertext',\r\n    width: 500,\r\n    formatValues: value => value\r\n};\r\n","/**\r\n * @fileOverview Main Donut Chart entry point.\r\n * Orchestrates all rendering for the chart, passing props to\r\n * Arcs, DonutInnerText, and Legend children components.\r\n * @name DonutChart.js\r\n * @author JJ Naughton\r\n * @license MIT\r\n */\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Arcs from './Arcs';\r\nimport DonutInnerTextMobile from './DonutInnerTextMobile';\r\nimport Legend from './Legend';\r\n\r\n\r\n/**\r\n * Calculates the total of all the items' value,\r\n * using a reduce function over the items.\r\n * @param {} items - An array of items, each with values, at least.\r\n */\r\nfunction calculateTotal(items) {\r\n    return items.reduce((sum, currItem) => sum + currItem.value, 0);\r\n}\r\n\r\n/**\r\n * @extends {Component}\r\n */\r\nexport default class DonutChart extends Component {\r\n    /**\r\n    * Represents a DonutChart.\r\n    * @constructor\r\n    * @param {} props - Object of propTypes with defaultProps as fallback.\r\n    */\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const { data } = props;\r\n\r\n        this.state = {\r\n            selected: data[0],\r\n            toggleSelect: false\r\n        };\r\n    }\r\n\r\n    componentWillReceiveProps(newProps) {\r\n        const { data } = newProps;\r\n\r\n        // if new data, reset\r\n        if (data && (JSON.stringify(data)\r\n                    !== JSON.stringify(this.props.data))) {\r\n            this.setState({\r\n                selected: data[0],\r\n                toggleSelect: false\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles the clicking of an ArcPath region.\r\n     * Toggles the selected state,\r\n     * effectively freezing all handlers on other, unselected items.\r\n     * Calls the onClick handler,\r\n     * passed by the user as a prop,\r\n     * providing the item clicked,\r\n     * as well as whether it's becoming selected or unselected.\r\n     * @param {} item - The item object selected, with a label and a value, at least.\r\n     */\r\n    handleClick(item) {\r\n        if (this.state.selected.label === item.label) {\r\n            const toggle = this.props.clickToggle ? !this.state.toggleSelect : false;\r\n            this.setState({\r\n                toggleSelect: toggle,\r\n                selected: item\r\n            });\r\n            this.props.onClick(item, toggle);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles the mouseenter event over an ArcPath region.\r\n     * Sets the clicked item as selected in the state object.\r\n     * @param {} item - The item object selected, with a label and a value, at least.\r\n     */\r\n    handleMouseEnter(item) {\r\n        if (!this.state.toggleSelect) {\r\n            this.setState({\r\n                selected: item\r\n            });\r\n            this.props.onMouseEnter(item);\r\n        }\r\n    }\r\n\r\n    /* React render function */\r\n    render() {\r\n        const {\r\n            startAngle, width, height, formatValues, className, data, legend,\r\n            emptyColor, strokeColor, colors, colorFunction, innerRadius,\r\n            outerRadius, emptyOffset, selectedOffset, toggledOffset\r\n        } = this.props;\r\n\r\n        const arcsClassName = `${className}-arcs`;\r\n        const innerTextClassName = `${className}-innertext`;\r\n        const legendClassName = `${className}-legend`;\r\n\r\n        const checkData = data.length ? data : [{\r\n            label: '',\r\n            value: 100,\r\n            isEmpty: true\r\n        }];\r\n\r\n        const total = calculateTotal(checkData);\r\n        const twoThirds = 2 / 3;\r\n        const graphWidth = legend ? (width * twoThirds) : width;\r\n        const legendWidth = width - graphWidth;\r\n\r\n        return <div className='hidden-over-500'>\r\n        { legend ?\r\n        \r\n        <svg \r\n        width={`${300}px`}\r\n        height={ `${120}px`}\r\n        viewBox={`400 20 450 80`}\r\n        >\r\n            <Legend\r\n                data={ checkData }\r\n                totalWidth={ width }\r\n                width={ legendWidth }\r\n                colors={ colors }\r\n                emptyColor={ emptyColor }\r\n                strokeColor={ strokeColor }\r\n                colorFunction={ colorFunction }\r\n                onMouseEnter={ this.handleMouseEnter.bind(this) }\r\n                onClick={ this.handleClick.bind(this) }\r\n                selected={ this.state.selected }\r\n                toggleSelect={ this.state.toggleSelect}\r\n                className={ legendClassName } />\r\n            </svg>\r\n            \r\n            : null }\r\n            <svg className='donutchart-mobile'\r\n            width={'300px' }\r\n            // height={'100px' }\r\n            viewBox={`0 0 500 500`}>\r\n            <Arcs\r\n                className={ arcsClassName }\r\n                colors={ colors }\r\n                data={ checkData }\r\n                width={ graphWidth }\r\n                emptyColor={ emptyColor }\r\n                strokeColor={ strokeColor }\r\n                colorFunction={ colorFunction }\r\n                onMouseEnter={ this.handleMouseEnter.bind(this) }\r\n                onClick={ this.handleClick.bind(this) }\r\n                selected={ this.state.selected }\r\n                startAngle = { startAngle }\r\n                toggleSelect={ this.state.toggleSelect }\r\n                innerRadius={ innerRadius }\r\n                outerRadius={ outerRadius }\r\n                selectedOffset={ selectedOffset }\r\n                toggledOffset={ toggledOffset }\r\n                emptyOffset={ emptyOffset }\r\n                total={ total } />\r\n            <DonutInnerTextMobile\r\n                item={ this.state.selected }\r\n                width={ graphWidth }\r\n                formatValues={ formatValues }\r\n                total={ total }\r\n                className= { innerTextClassName } />\r\n            \r\n        </svg>\r\n        </div>;\r\n    }\r\n}\r\n\r\nDonutChart.propTypes = {\r\n    data: PropTypes.arrayOf(PropTypes.shape({\r\n        value: PropTypes.number.isRequired,\r\n        label: PropTypes.string.isRequired,\r\n        className: PropTypes.string,\r\n        isEmpty: PropTypes.boolean\r\n    })).isRequired,\r\n    className: PropTypes.string,\r\n    height: PropTypes.number,\r\n    width: PropTypes.number,\r\n    colors: PropTypes.arrayOf(PropTypes.string),\r\n    emptyColor: PropTypes.string,\r\n    stokeColor: PropTypes.string,\r\n    startAngle: PropTypes.number,\r\n    colorFunction: PropTypes.func,\r\n    innerRadius: PropTypes.number,\r\n    outerRadius: PropTypes.number,\r\n    selectedOffset: PropTypes.number,\r\n    emptyOffset: PropTypes.number,\r\n    toggledOffset: PropTypes.number,\r\n    formatValues: PropTypes.func,\r\n    onMouseEnter: PropTypes.func,\r\n    onClick: PropTypes.func,\r\n    legend: PropTypes.bool,\r\n    clickToggle: PropTypes.bool\r\n};\r\n\r\nDonutChart.defaultProps = {\r\n    data: [{\r\n        label: '',\r\n        value: 100,\r\n        isEmpty: true\r\n    }],\r\n    className: 'donutchart',\r\n    height: 500,\r\n    width: 750,\r\n    colors: ['#f44336', '#e91e63', '#9c27b0', '#673ab7',\r\n        '#3f51b5', '#2196f3', '#03a9f4', '#00bcd4',\r\n        '#009688', '#4caf50', '#8bc34a', '#cddc39',\r\n        '#ffeb3b', '#ffc107', '#ff9800', '#ff5722',\r\n        '#795548', '#607d8b'],\r\n    emptyColor: '#e0e0e0',\r\n    strokeColor: '#212121',\r\n    startAngle: 0,\r\n    colorFunction: (colors, index) => colors[(index % colors.length)],\r\n    innerRadius: 0.70,\r\n    outerRadius: 0.90,\r\n    selectedOffset: 0.03,\r\n    emptyOffset: 0.08,\r\n    toggledOffset: 0.04,\r\n    formatValues: (value, total) => (\r\n        Number.isNaN(value / total) ? '--'\r\n            : `${((value / total) * 100).toFixed(2)}%`\r\n    ),\r\n    onMouseEnter: item => item,\r\n    onClick: (item, toggled) => (toggled ? item : null),\r\n    legend: true,\r\n    clickToggle: true\r\n};\r\n","import React from 'react';\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport '../../App.css';\r\nimport simpleNumberLocalizer from 'react-widgets-simple-number';\r\nimport Portfolios from '../../objects/portfolios';\r\nimport NumberPicker from 'react-widgets/lib/NumberPicker'\r\nimport DonutChart from '../../lib/src/DonutChart';\r\nimport DonutChartMobile from '../../lib/src/DonutChartMobile';\r\nsimpleNumberLocalizer();\r\n\r\nclass RiskPage1 extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.numberChange = this.numberChange.bind(this);\r\n        this.state = {pageNumber: 1};\r\n        }\r\n\r\n    numberChange(value){\r\n        if(this.intervalId){clearTimeout(this.intervalId);}\r\n        this.intervalId = setTimeout(\r\n            () => this.setState({riskTolerance: value}), 500);\r\n        this.props.setRiskTolerance(value);\r\n    }\r\n    renderRecommendation(){\r\n        const riskTolerance = this.state.riskTolerance;\r\n        const portfolio = Portfolios[riskTolerance];\r\n        if(!portfolio)return null;\r\n        const data = Object.keys(portfolio).map(\r\n            key => ({label: key, value: portfolio[key]})\r\n        )\r\n        return (\r\n        <div className='portfolio-recommend'>\r\n            <div>Thank you! At a risk tolerance level of {riskTolerance},\r\n                we recommend: </div>\r\n              <div className='donutchart-container hidden-under-500'>\r\n                  \r\n                <DonutChart className='donut-chart'\r\n                    data={data} formatValues={el => el+\"%\"}\r\n                    // width={650}\r\n                    />\r\n            </div>\r\n                <DonutChartMobile className='donutchart-with-legend-mobile'\r\n                \r\n                    data={data} formatValues={el => el+\"%\"}\r\n                    />\r\n\r\n                    <div>\r\n                    <span\r\n                    style={{marginRight: '15px'}}>Next, we'll suggest  \r\n            a series of asset transfers to achieve this recommended portfolio.</span>\r\n                    <button\r\n                        onClick={\r\n                            this.props.nextPage}>\r\n                            Next\r\n                    </button>\r\n                    </div>\r\n\r\n        </div>\r\n        )\r\n    }\r\n    addPercentSigns(){\r\n        Array.from(document.getElementsByClassName(\"donut-chart-legend-item-label\")).forEach(\r\n            el => \r\n       { if(!el.innerHTML.endsWith('%')) {el.innerHTML += \"%\"}});\r\n    }\r\n    changeViewBox(){\r\n        document.getElementsByClassName('donut-chart')[0].viewBox='0 0 100 100'\r\n    }\r\n    render(){\r\n        setTimeout(this.addPercentSigns, 0);\r\n        return <div className = 'page'>\r\n            <div className='centered-container' style={{maxWidth: '640px'}}>\r\n            <div style={{marginBottom: '22px'}}>\r\n                Over the next two pages, we'll guide you to  \r\n                an investment portfolio that achieves a balance of \r\n                stability and profitability, tailored to your \r\n                financial situation and preferences.\r\n            </div>\r\n            Please select a level of risk tolerance from 1 to 10.\r\n\r\n            <NumberPicker min = {1} max ={10} className='number-picker'\r\n            onChange = {this.numberChange}/>\r\n\r\n            <div>\r\n                {this.renderRecommendation()}\r\n            </div>\r\n            </div>\r\n            </div>\r\n\r\n       \r\n    }\r\n}\r\n\r\nexport default RiskPage1;","const categories = [\"money market\", \"government bonds\",\r\n\"equity mutual funds\", \"real estate\", \"futures\", \"options\"];\r\n\r\nexport default categories;","export const generateTransactionObjectFromRoundedData = function(state, idealState, categories){\r\n    let result = [];\r\n    let desiredChangeByCat = {};\r\n    let desiredChangeByAmt = {};\r\n    let desiredChange;\r\n    let exactCanceller;\r\n    let exactCancellers;\r\n    Array.prototype.without = function(el){\r\n        let idx = this.indexOf(el);\r\n        return this.slice(0, idx).concat(this.slice(idx+1));\r\n    }\r\n        for(let i=categories.length - 1; i>=0; i--){\r\n            let cat = categories[i];      \r\n            desiredChangeByCat[cat]=(idealState[cat] || 0)-(state[cat] || 0); \r\n            desiredChange = desiredChangeByCat[cat];\r\n            if( desiredChange !== 0){\r\n                let siblingCats = desiredChangeByAmt[desiredChange];\r\n                desiredChangeByAmt[desiredChange] = siblingCats ? siblingCats.concat([cat]) : [cat];\r\n            }   \r\n        }\r\n        for(let i=0; i<categories.length; i++){\r\n            let cat = categories[i];\r\n             desiredChange = desiredChangeByCat[cat];\r\n            if(!desiredChange) continue;\r\n            exactCancellers = desiredChangeByAmt[-desiredChange];\r\n            if (exactCancellers && exactCancellers.length){\r\n                desiredChangeByAmt[desiredChange]=desiredChangeByAmt[desiredChange].without(cat);\r\n                exactCanceller = exactCancellers.pop();\r\n                result.push(\r\n                desiredChange<0 ? [cat, exactCanceller, -desiredChange] : [exactCanceller, cat, desiredChange]\r\n                );\r\n                desiredChangeByCat[cat] = 0;\r\n                desiredChangeByCat[exactCanceller] = 0;\r\n            }\r\n        }\r\n            for(let i=0; i<categories.length; i++){\r\n                let cat = categories[i];\r\n                 desiredChange = desiredChangeByCat[cat];\r\n                for (let j=i+1; j< categories.length; j++){\r\n                    let cat2 = categories[j];\r\n                    let desiredChange2 = desiredChangeByCat[cat2];\r\n                    let desiredChange3 = -desiredChange - desiredChange2;\r\n                    if (!desiredChangeByAmt[desiredChange3]) continue;\r\n                    let cat3 = desiredChangeByAmt[desiredChange3].find(c=>![cat, cat2].includes(c));\r\n                    if (!cat3) continue;\r\n                    let product = desiredChange *desiredChange2 * desiredChange3;\r\n                    let cats = [cat, cat2, cat3];\r\n                    let oddCatOut = cats.find(\r\n                        c => desiredChangeByCat[c] * product > 0);\r\n                    let oddChangeOut = desiredChangeByCat[oddCatOut];\r\n                    let sameSideCats = cats.filter(c=> c !==oddCatOut);\r\n                    if (oddChangeOut < 0){\r\n                        sameSideCats.forEach(ssc => result.push([oddCatOut, ssc, desiredChangeByCat[ssc]]));\r\n                    }\r\n                    else {\r\n                        sameSideCats.forEach(ssc => result.push([ ssc, oddCatOut, -desiredChangeByCat[ssc]]));\r\n                    }\r\n                    cats.forEach(c=> {\r\n                        let priorSibs = desiredChangeByAmt[desiredChangeByCat[c]];\r\n                        let cIdx = priorSibs.indexOf(c);\r\n                        desiredChangeByAmt[desiredChangeByCat[c]] = \r\n                        priorSibs.slice(0,cIdx).concat(priorSibs.slice(cIdx+1));\r\n                        desiredChangeByCat[c] = 0;\r\n                    })\r\n                    break;\r\n                }\r\n            }\r\n        \r\n    \r\n        for(let i=0; i<categories.length; i++){\r\n            let cat = categories[i];\r\n            if(desiredChangeByCat[cat]) {\r\n                desiredChangeByAmt[desiredChangeByCat[cat]]=\r\n                desiredChangeByAmt[desiredChangeByCat[cat]].without(cat);}\r\n            while(desiredChangeByCat[categories[i]]){\r\n                cat = categories[i];\r\n             desiredChange = desiredChangeByCat[cat];  \r\n             let desiredChangeWithOppositeSign;\r\n             if(desiredChangeByAmt[-desiredChange] && desiredChangeByAmt[-desiredChange].length){\r\n                desiredChangeWithOppositeSign = -desiredChange;\r\n             }\r\n             else{\r\n             desiredChangeWithOppositeSign = Object.keys(desiredChangeByAmt).find(\r\n                change => change *desiredChange<0 && desiredChangeByAmt[change].length\r\n                );\r\n            }\r\n            if (desiredChangeWithOppositeSign === undefined){return result;}\r\n            let antiCat = desiredChangeByAmt[desiredChangeWithOppositeSign].pop();\r\n            let transferAmt = Math.min(Math.abs(desiredChangeByCat[antiCat]), Math.abs(desiredChange));\r\n            transferAmt = desiredChange < 0 ? transferAmt : -transferAmt;\r\n            result.push(transferAmt>0? [cat, antiCat, transferAmt] : [antiCat, cat, -transferAmt]);\r\n            desiredChangeByCat[cat] += transferAmt;\r\n            desiredChangeByCat[antiCat] -=transferAmt;  \r\n            let newDesiredChangeForAntiCat = desiredChangeWithOppositeSign - transferAmt;\r\n            let newSiblingCats = desiredChangeByAmt[newDesiredChangeForAntiCat];\r\n            desiredChangeByAmt[newDesiredChangeForAntiCat] = newSiblingCats \r\n                ? \r\n            newSiblingCats.concat(antiCat) \r\n                : \r\n            [antiCat];\r\n            if(newDesiredChangeForAntiCat) {\r\n            let exactCancellersForAntiCat = desiredChangeByAmt[-newDesiredChangeForAntiCat];\r\n            if (exactCancellersForAntiCat && exactCancellersForAntiCat.length){\r\n                desiredChangeByAmt[newDesiredChangeForAntiCat]=\r\n                desiredChangeByAmt[newDesiredChangeForAntiCat].without(antiCat);\r\n                exactCanceller = exactCancellersForAntiCat.pop();\r\n                result.push(\r\n                newDesiredChangeForAntiCat<0 ?\r\n                 [antiCat, exactCanceller, -newDesiredChangeForAntiCat] \r\n                 : \r\n                 [exactCanceller, antiCat, newDesiredChangeForAntiCat]\r\n                );\r\n                desiredChangeByCat[antiCat] = 0;\r\n                desiredChangeByCat[exactCanceller] = 0;\r\n            }\r\n            }\r\n             cat = [cat, antiCat].find(c => desiredChangeByCat[c] !==0); //run linear lookup on the survivor:\r\n             desiredChange = desiredChangeByCat[cat];\r\n             if(cat){\r\n            for (let j=0; j< categories.length; j++){\r\n                    \r\n                    let cat2 = categories[j];\r\n                    if(cat2 === cat || !desiredChangeByCat[cat2]) continue;\r\n                    let desiredChange2 = desiredChangeByCat[cat2];\r\n                    let desiredChange3 = -desiredChange - desiredChange2;\r\n                    if (!desiredChange3 || !desiredChangeByAmt[desiredChange3]) continue;\r\n                    let cat3 = desiredChangeByAmt[desiredChange3].find(c=>![cat, cat2].includes(c));\r\n                    if (!cat3) continue;\r\n                    let product = desiredChange *desiredChange2 * desiredChange3;\r\n                    let cats = [cat, cat2, cat3];\r\n                    let oddCatOut = cats.find(\r\n                        c => desiredChangeByCat[c] * product > 0);\r\n                    let oddChangeOut = desiredChangeByCat[oddCatOut];\r\n                    let sameSideCats = cats.filter(c=> c !==oddCatOut);\r\n                    if (oddChangeOut < 0){\r\n                        \r\n                        sameSideCats.forEach(ssc => {\r\n                            result.push([oddCatOut, ssc, desiredChangeByCat[ssc]]);\r\n                        });\r\n                        \r\n                    }\r\n                    else {\r\n                        sameSideCats.forEach(ssc => \r\n                            {result.push([ ssc, oddCatOut, -desiredChangeByCat[ssc]])                               \r\n                            });\r\n                    }\r\n                    cats.forEach(c=> {\r\n                        if(c !== categories[i]){\r\n                        let priorSibs = desiredChangeByAmt[desiredChangeByCat[c]];\r\n                        let cIdx = priorSibs.indexOf(c);\r\n                        desiredChangeByAmt[desiredChangeByCat[c]] = \r\n                        priorSibs.slice(0,cIdx).concat(priorSibs.slice(cIdx+1));\r\n                    }\r\n                    desiredChangeByCat[c] = 0;\r\n                    })\r\n                    break;\r\n                }\r\n             }\r\n                \r\n        }\r\n        }\r\n        return result;\r\n}\r\n\r\n\r\nexport const generateTransactionObject = function(state, idealStateInPercentage, categories, roundingPercentage){\r\nlet roundedState = {};\r\nlet roundedIdealState = {};\r\nlet total = 0;\r\ncategories.forEach(cat => {total += state[cat] || 0});\r\ntotal = parseInt(total);\r\ncategories.forEach(cat => \r\n    {roundedState[cat]= Math.round(state[cat] * 100/(total*roundingPercentage))\r\n    roundedIdealState[cat] = Math.round(idealStateInPercentage[cat] /roundingPercentage)});\r\n\r\n    let transactionsInPercentages = generateTransactionObjectFromRoundedData(\r\n        roundedState, \r\n        roundedIdealState,\r\n        categories);\r\n    let transactionsBySource = {};\r\n    let transactionsInDollars = transactionsInPercentages.map(\r\n        t => {\r\n            let newTransaction = [t[0], t[1], Math.round(t[2] * roundingPercentage*total)/100];\r\n            transactionsBySource[t[0]] = transactionsBySource[t[0]] || [];\r\n            transactionsBySource[t[0]].push(newTransaction);\r\n            return newTransaction;}\r\n    );\r\n    Object.keys(transactionsBySource).forEach(\r\n        sourceCat => {\r\n            if(!idealStateInPercentage[sourceCat]){\r\n            let sum = 0;\r\n            transactionsBySource[sourceCat].forEach(\r\n                transaction => {sum += transaction[2];}\r\n            )\r\n            let remainder = (state[sourceCat] - sum);\r\n            transactionsBySource[sourceCat][0][2] += remainder;\r\n        }\r\n    }\r\n    )    \r\n    return transactionsInDollars;\r\n}\r\n\r\nexport const generateTransactionChoices = function(state, idealStateInPercentage, categories, roundingPercentageUpperBound=5, numSteps=30){\r\n    let roundingPercentage; let stepSize = (roundingPercentageUpperBound - .1)/(numSteps-1)\r\n    let results = [generateTransactionObject(state, idealStateInPercentage, categories, .1)];\r\n    let minNumberOfTransactions = results[0].length;\r\n    categories = categories.slice();\r\n    for (let i=1; i<numSteps; i++){\r\n        for(let j=0; j<8; j++){\r\n            categories.sort(()=>Math.random()-.5);\r\n            roundingPercentage = .1 + i*stepSize;\r\n        let newTransactionObject = generateTransactionObject(state, idealStateInPercentage, categories, roundingPercentage);\r\n        if (newTransactionObject.length < minNumberOfTransactions){\r\n            minNumberOfTransactions = newTransactionObject.length;\r\n            // console.log(`roundingPercentage: ${roundingPercentage.toFixed(2)}, numTranscs: ${minNumberOfTransactions}`);\r\n            // console.log(`categories: ${categories}`)\r\n            results.push(newTransactionObject);\r\n        }\r\n    }\r\n}\r\n    return results;\r\n}\r\n\r\n\r\n// let categories = 'abcdef'.split('');\r\n// const obj1={d: 55, e: 60, f: 44}\r\n// let example;\r\n\r\n//     example = generateTransactionChoices(\r\n// obj1, {a:30, b: 30, c: 20, d: 20}, categories)\r\n// categories =  'fcbdae'.split('');\r\n// subexample=generateTransactionObject(\r\n//     obj1, {a:30, b:30, c: 20, d: 20}, categories, 2.803\r\n// )\r\n// console.log(subexample);\r\n\r\n// console.log(example);\r\n// let total = 0;\r\n// Object.values(obj1).forEach(val => {total += val})\r\n// subexample.forEach(t => {obj1[t[0]] -= t[2];\r\n// obj1[t[1]]+=t[2];})\r\n// const finalPercents=categories.map(cat=>100* obj1[cat]/total)\r\n// console.log(total);\r\n// console.log(`finalPercents: ${finalPercents}`)\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\nclass LinearSelector extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={selectedNotchIdx: props.default,\r\n        notchSeparation: 100}\r\n        this.setSelectedIdx = this.setSelectedIdx.bind(this);\r\n    }\r\n    renderNotch(idx){\r\n            return <span className='vert'></span>\r\n    }\r\n    setSelectedIdx(idx){\r\n        this.setState({selectedNotchIdx: idx});\r\n        this.props.selectionFunction(idx);\r\n    }\r\n    componentDidUpdate(prevProps){\r\n        if(prevProps.dummyIdx !== this.props.dummyIdx){\r\n            this.setState({selectedNotchIdx: this.props.default});\r\n        }\r\n    }\r\n    render(){\r\n        const {numBuckets, leftText, rightText} = this.props;\r\n        const middleBuckets = new Array(numBuckets-2).fill('1');\r\n        return(\r\n            <div>\r\n            <div className='widget-left-text'>{leftText}</div> \r\n\r\n            <div className='line-selector'>\r\n            <svg height=\"20\" width=\"20\" className = 'polygon-pointer'\r\n            style={{left: `${100*this.state.selectedNotchIdx}px`}}>\r\n                <defs>\r\n    <linearGradient id=\"grad1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\r\n      <stop offset=\"0%\" style={{stopColor:'rgb(200,200,200)', stopOpacity:1}} />\r\n      <stop offset=\"100%\" style={{stopColor:'rgb(255,255,255)', stopOpacity:1}} />\r\n    </linearGradient>\r\n  </defs>\r\n  <polygon points=\"0,0 16,0 16,12 8,20 0,12\" style={{fill:'url(#grad1)', stroke: 'rgb(150,150,150)', strokeWidth:1}} />\r\n            </svg>\r\n                <span className = 'left-bucket'\r\n                onClick={()=>this.setSelectedIdx(0)}>\r\n                {this.renderNotch(0)}\r\n                </span>\r\n                {middleBuckets.map((_, idx) => <span className='bucket'\r\n                onClick={()=>this.setSelectedIdx(idx+1)}>\r\n                    {this.renderNotch(idx+1)}\r\n                    </span>)}\r\n                <span className='right-bucket'\r\n                onClick={()=>this.setSelectedIdx(this.props.numBuckets-1)}>\r\n                {this.renderNotch(this.props.numBuckets-1)}\r\n                </span>\r\n            </div>\r\n            \r\n            <div className='widget-right-text'>{rightText}</div>\r\n            \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LinearSelector;","import React from 'react';\r\nimport categories from '../../objects/categories';\r\nimport '../../App.css';\r\nimport Portfolios from '../../objects/portfolios';\r\nimport {generateTransactionChoices,\r\n    generateTransactionObjectFromRoundedData,\r\n    generateTransactionObject} from '../../functions/generate-transactions';\r\nimport LinearSelector from '../linear-selector/linear-selector';\r\n\r\n// import simpleNumberLocalizer from 'react-widgets-simple-number';\r\n\r\n// simpleNumberLocalizer();\r\n\r\n\r\nclass RiskPage2 extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        let obj = {};\r\n        categories.forEach(cat => obj[cat]='$0.00');\r\n        obj['idealStateInPercentage']= Portfolios[this.props.riskTolerance]\r\n        obj.dummyIdx = 0;\r\n        this.state =  obj;\r\n        this.buttonClick = this.buttonClick.bind(this);\r\n        window.getState = this.getState.bind(this);\r\n        this.leftText = \"Exactly matches template portfolio\"\r\n        this.rightText = \"Fewer transfers\"\r\n    }\r\n    getState(){\r\n        return this.state;\r\n    }\r\n    keyDownHandler(e){\r\n        console.log(e.key)\r\n        const allowedChars = '0123456789'.split('').concat(\r\n            ['Backspace', 'Tab', 'ArrowRight', 'ArrowLeft']);\r\n        if (!allowedChars.includes(e.key)){e.preventDefault();}\r\n    }\r\n    inputHandler(e, cat){\r\n        this.setState({[cat]: e.target.value})\r\n    }\r\n    buttonClick(){\r\n        const state = {};\r\n        categories.forEach(cat => state[cat] = parseFloat(this.state[cat].slice(1)));\r\n        const transactionChoices = generateTransactionChoices(state, \r\n            this.state.idealStateInPercentage,\r\n            categories);\r\n        this.setState({transactionChoices, choiceIdx: 0,\r\n        dummyIdx: this.state.dummyIdx + 1});\r\n    }\r\n    renderRecommendation(){\r\n        let choice = this.state.transactionChoices[this.state.choiceIdx];\r\n        return <div>\r\n            <ul className='transfer-container'>\r\n            {choice.map((t,idx) =>\r\n                <li key={idx}>Transfer {'$'+t[2].toFixed(2)} from {t[0]} to {t[1]}</li>)\r\n            }\r\n            </ul>\r\n            {this.state.transactionChoices.length>1 ?\r\n            <div className='bottom-widget-section'> <span style={{marginBottom: '12px',\r\n            display: 'inline-block'}}>Optionally, use fewer transfers:</span>\r\n                <LinearSelector numBuckets={this.state.transactionChoices.length}\r\n                dummyIdx={this.state.dummyIdx}\r\n                default={0}\r\n                selectionFunction={choiceIdx=>this.setState({choiceIdx})}\r\n                leftText={this.leftText}\r\n                rightText={this.rightText}/>\r\n            </div>\r\n                : null}\r\n        </div> \r\n    }\r\n    focusHandler(e){\r\n        let val = e.target.value;\r\n        e.target.value = val === '$0.00' ? '' : val.split('.')[0].slice(1);\r\n    }\r\n    blurHandler(e, cat){\r\n        let val = e.target.value || '0';\r\n        this.setState({[cat]: '$' + val + '.00'});\r\n        e.target.value = '$' + val + '.00';\r\n    }\r\n    render(){\r\n        return (<div className = 'page'>\r\n            <div className = 'page-content'>\r\n            <div className='centered-container' style={{maxWidth: '480px'}}>\r\n            <div style={{textAlign: 'left'}}>\r\n             Since we don't have your current investment portfolio on file yet, please \r\n             consult your records and enter the amounts below.</div>\r\n            \r\n                        <table className='assets-container'>\r\n                <tbody>\r\n                {categories.map(cat=>\r\n                <tr key={cat}>\r\n                   <td className='asset-label'>{cat}:</td>\r\n                   <td><input \r\n                   onFocus={e=>this.focusHandler(e)}\r\n                   onBlur={e=>this.blurHandler(e, cat)}\r\n                   defaultValue = '$0.00'\r\n                   className = \"asset-input\"\r\n                   onKeyDown={this.keyDownHandler}\r\n                   onPaste={e=>e.preventDefault()}\r\n                   ></input></td> \r\n                 </tr>\r\n                )}\r\n                </tbody>\r\n                   </table>\r\n                   <button onClick={()=>setTimeout(this.buttonClick,80)}>Recommend asset transfers</button>\r\n            </div>\r\n                \r\n                  {this.state.transactionChoices ? this.renderRecommendation() : null}\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default RiskPage2;","import React from 'react';\r\nimport RiskPage1 from './risk-page-1';\r\nimport RiskPage2 from './risk-page-2';\r\nclass RiskTolerance extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {pageNumber: 1\r\n        }\r\n        this.nextPage = this.nextPage.bind(this);\r\n        this.setRiskTolerance = this.setRiskTolerance.bind(this);\r\n    }\r\n    nextPage(){\r\n        this.setState({pageNumber: this.state.pageNumber + 1})\r\n    }\r\n    setRiskTolerance(value){\r\n        this.setState({riskTolerance: value});\r\n    }\r\n    render(){\r\n        let page =null;\r\n        if(this.state.pageNumber === 1) {\r\n            page = <RiskPage1 nextPage={this.nextPage}\r\n            setRiskTolerance = {this.setRiskTolerance}/>;}\r\n        else if(this.state.pageNumber === 2) {\r\n            page = <RiskPage2 riskTolerance={this.state.riskTolerance}/>;}\r\n        return <div> {page}\r\n         \r\n        </div>\r\n    }\r\n}\r\n\r\nexport default RiskTolerance;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport RiskPage1 from './components/risk-tolerance/risk-page-1';\r\nimport RiskTolerance from './components/risk-tolerance/risk-tolerance';\r\nfunction App() {\r\n  return (\r\n    <div id=\"App\">\r\n      <header className=\"App-header\">\r\n        \r\n       \r\n      </header>\r\n      <RiskTolerance />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}